# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""This is the Python interface to VMAP"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _PyVMAP
else:
    import _PyVMAP

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PyVMAP.delete_SwigPyIterator

    def value(self):
        return _PyVMAP.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _PyVMAP.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _PyVMAP.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _PyVMAP.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _PyVMAP.SwigPyIterator_equal(self, x)

    def copy(self):
        return _PyVMAP.SwigPyIterator_copy(self)

    def next(self):
        return _PyVMAP.SwigPyIterator_next(self)

    def __next__(self):
        return _PyVMAP.SwigPyIterator___next__(self)

    def previous(self):
        return _PyVMAP.SwigPyIterator_previous(self)

    def advance(self, n):
        return _PyVMAP.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _PyVMAP.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _PyVMAP.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _PyVMAP.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _PyVMAP.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _PyVMAP.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _PyVMAP.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _PyVMAP:
_PyVMAP.SwigPyIterator_swigregister(SwigPyIterator)

class VectorTemplateCoordinateSystem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateCoordinateSystem___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateCoordinateSystem___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateCoordinateSystem___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateCoordinateSystem___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateCoordinateSystem___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateCoordinateSystem___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateCoordinateSystem___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateCoordinateSystem___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateCoordinateSystem___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateCoordinateSystem_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateCoordinateSystem_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateCoordinateSystem_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateCoordinateSystem_swiginit(self, _PyVMAP.new_VectorTemplateCoordinateSystem(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateCoordinateSystem_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateCoordinateSystem_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateCoordinateSystem_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateCoordinateSystem_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateCoordinateSystem_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateCoordinateSystem_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateCoordinateSystem

# Register VectorTemplateCoordinateSystem in _PyVMAP:
_PyVMAP.VectorTemplateCoordinateSystem_swigregister(VectorTemplateCoordinateSystem)

class VectorTemplateIntegrationType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateIntegrationType_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateIntegrationType___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateIntegrationType___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateIntegrationType___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateIntegrationType___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateIntegrationType___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateIntegrationType___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateIntegrationType___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateIntegrationType___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateIntegrationType___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateIntegrationType_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateIntegrationType_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateIntegrationType_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateIntegrationType_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateIntegrationType_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateIntegrationType_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateIntegrationType_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateIntegrationType_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateIntegrationType_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateIntegrationType_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateIntegrationType_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateIntegrationType_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateIntegrationType_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateIntegrationType_swiginit(self, _PyVMAP.new_VectorTemplateIntegrationType(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateIntegrationType_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateIntegrationType_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateIntegrationType_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateIntegrationType_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateIntegrationType_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateIntegrationType_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateIntegrationType_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateIntegrationType_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateIntegrationType

# Register VectorTemplateIntegrationType in _PyVMAP:
_PyVMAP.VectorTemplateIntegrationType_swigregister(VectorTemplateIntegrationType)

class VectorTemplateElementType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateElementType_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateElementType___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateElementType___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateElementType___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateElementType___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateElementType___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateElementType___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateElementType___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateElementType___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateElementType___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateElementType_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateElementType_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateElementType_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateElementType_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateElementType_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateElementType_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateElementType_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateElementType_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateElementType_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateElementType_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateElementType_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateElementType_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateElementType_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateElementType_swiginit(self, _PyVMAP.new_VectorTemplateElementType(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateElementType_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateElementType_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateElementType_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateElementType_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateElementType_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateElementType_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateElementType_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateElementType_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateElementType

# Register VectorTemplateElementType in _PyVMAP:
_PyVMAP.VectorTemplateElementType_swigregister(VectorTemplateElementType)

class VectorTemplateSection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateSection_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateSection___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateSection___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateSection___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateSection___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateSection___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateSection___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateSection___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateSection___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateSection___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateSection_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateSection_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateSection_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateSection_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateSection_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateSection_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateSection_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateSection_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateSection_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateSection_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateSection_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateSection_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateSection_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateSection_swiginit(self, _PyVMAP.new_VectorTemplateSection(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateSection_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateSection_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateSection_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateSection_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateSection_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateSection_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateSection_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateSection_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateSection

# Register VectorTemplateSection in _PyVMAP:
_PyVMAP.VectorTemplateSection_swigregister(VectorTemplateSection)

class VectorTemplateStateVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateStateVariable_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateStateVariable___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateStateVariable___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateStateVariable___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateStateVariable___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateStateVariable___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateStateVariable___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateStateVariable___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateStateVariable___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateStateVariable___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateStateVariable_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateStateVariable_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateStateVariable_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateStateVariable_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateStateVariable_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateStateVariable_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateStateVariable_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateStateVariable_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateStateVariable_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateStateVariable_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateStateVariable_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateStateVariable_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateStateVariable_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateStateVariable_swiginit(self, _PyVMAP.new_VectorTemplateStateVariable(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateStateVariable_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateStateVariable_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateStateVariable_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateStateVariable_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateStateVariable_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateStateVariable_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateStateVariable_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateStateVariable_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateStateVariable

# Register VectorTemplateStateVariable in _PyVMAP:
_PyVMAP.VectorTemplateStateVariable_swigregister(VectorTemplateStateVariable)

class VectorTemplateUnit(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateUnit_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateUnit___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateUnit___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateUnit___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateUnit___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateUnit___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateUnit___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateUnit___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateUnit___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateUnit___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateUnit_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateUnit_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateUnit_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateUnit_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateUnit_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateUnit_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateUnit_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateUnit_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateUnit_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateUnit_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateUnit_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateUnit_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateUnit_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateUnit_swiginit(self, _PyVMAP.new_VectorTemplateUnit(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateUnit_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateUnit_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateUnit_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateUnit_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateUnit_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateUnit_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateUnit_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateUnit_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateUnit

# Register VectorTemplateUnit in _PyVMAP:
_PyVMAP.VectorTemplateUnit_swigregister(VectorTemplateUnit)

class VectorTemplateGeometrySet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateGeometrySet_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateGeometrySet___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateGeometrySet___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateGeometrySet___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateGeometrySet___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateGeometrySet___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateGeometrySet___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateGeometrySet___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateGeometrySet___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateGeometrySet___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateGeometrySet_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateGeometrySet_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateGeometrySet_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateGeometrySet_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateGeometrySet_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateGeometrySet_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateGeometrySet_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateGeometrySet_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateGeometrySet_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateGeometrySet_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateGeometrySet_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateGeometrySet_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateGeometrySet_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateGeometrySet_swiginit(self, _PyVMAP.new_VectorTemplateGeometrySet(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateGeometrySet_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateGeometrySet_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateGeometrySet_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateGeometrySet_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateGeometrySet_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateGeometrySet_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateGeometrySet_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateGeometrySet_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateGeometrySet

# Register VectorTemplateGeometrySet in _PyVMAP:
_PyVMAP.VectorTemplateGeometrySet_swigregister(VectorTemplateGeometrySet)

class VectorTemplateParameter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateParameter_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateParameter___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateParameter___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateParameter___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateParameter___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateParameter___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateParameter___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateParameter___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateParameter___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateParameter___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateParameter_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateParameter_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateParameter_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateParameter_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateParameter_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateParameter_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateParameter_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateParameter_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateParameter_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateParameter_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateParameter_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateParameter_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateParameter_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateParameter_swiginit(self, _PyVMAP.new_VectorTemplateParameter(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateParameter_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateParameter_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateParameter_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateParameter_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateParameter_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateParameter_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateParameter_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateParameter_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateParameter

# Register VectorTemplateParameter in _PyVMAP:
_PyVMAP.VectorTemplateParameter_swigregister(VectorTemplateParameter)

class VectorTemplateTable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateTable_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateTable___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateTable___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateTable___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateTable___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateTable___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateTable___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateTable___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateTable___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateTable___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateTable_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateTable_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateTable_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateTable_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateTable_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateTable_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateTable_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateTable_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateTable_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateTable_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateTable_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateTable_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateTable_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateTable_swiginit(self, _PyVMAP.new_VectorTemplateTable(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateTable_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateTable_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateTable_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateTable_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateTable_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateTable_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateTable_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateTable_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateTable

# Register VectorTemplateTable in _PyVMAP:
_PyVMAP.VectorTemplateTable_swigregister(VectorTemplateTable)

class VectorTemplateMaterial(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateMaterial_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateMaterial___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateMaterial___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateMaterial___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateMaterial___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateMaterial___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateMaterial___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateMaterial___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateMaterial___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateMaterial___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateMaterial_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateMaterial_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateMaterial_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateMaterial_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateMaterial_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateMaterial_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateMaterial_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateMaterial_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateMaterial_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateMaterial_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateMaterial_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateMaterial_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateMaterial_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateMaterial_swiginit(self, _PyVMAP.new_VectorTemplateMaterial(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateMaterial_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateMaterial_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateMaterial_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateMaterial_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateMaterial_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateMaterial_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateMaterial_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateMaterial_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateMaterial

# Register VectorTemplateMaterial in _PyVMAP:
_PyVMAP.VectorTemplateMaterial_swigregister(VectorTemplateMaterial)

class VectorTemplateUChar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateUChar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateUChar___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateUChar___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateUChar___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateUChar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateUChar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateUChar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateUChar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateUChar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateUChar___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateUChar_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateUChar_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateUChar_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateUChar_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateUChar_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateUChar_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateUChar_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateUChar_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateUChar_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateUChar_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateUChar_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateUChar_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateUChar_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateUChar_swiginit(self, _PyVMAP.new_VectorTemplateUChar(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateUChar_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateUChar_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateUChar_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateUChar_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateUChar_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateUChar_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateUChar_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateUChar_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateUChar

# Register VectorTemplateUChar in _PyVMAP:
_PyVMAP.VectorTemplateUChar_swigregister(VectorTemplateUChar)

class VectorTemplateInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateInt___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateInt___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateInt___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateInt___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateInt_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateInt_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateInt_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateInt_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateInt_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateInt_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateInt_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateInt_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateInt_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateInt_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateInt_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateInt_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateInt_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateInt_swiginit(self, _PyVMAP.new_VectorTemplateInt(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateInt_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateInt_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateInt_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateInt_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateInt_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateInt_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateInt_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateInt_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateInt

# Register VectorTemplateInt in _PyVMAP:
_PyVMAP.VectorTemplateInt_swigregister(VectorTemplateInt)

class VectorTemplateDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateDouble___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateDouble___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateDouble___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateDouble___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateDouble_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateDouble_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateDouble_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateDouble_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateDouble_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateDouble_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateDouble_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateDouble_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateDouble_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateDouble_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateDouble_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateDouble_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateDouble_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateDouble_swiginit(self, _PyVMAP.new_VectorTemplateDouble(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateDouble_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateDouble_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateDouble_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateDouble_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateDouble_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateDouble_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateDouble_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateDouble_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateDouble

# Register VectorTemplateDouble in _PyVMAP:
_PyVMAP.VectorTemplateDouble_swigregister(VectorTemplateDouble)

class VectorTemplateString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _PyVMAP.VectorTemplateString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _PyVMAP.VectorTemplateString___nonzero__(self)

    def __bool__(self):
        return _PyVMAP.VectorTemplateString___bool__(self)

    def __len__(self):
        return _PyVMAP.VectorTemplateString___len__(self)

    def __getslice__(self, i, j):
        return _PyVMAP.VectorTemplateString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _PyVMAP.VectorTemplateString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _PyVMAP.VectorTemplateString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _PyVMAP.VectorTemplateString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _PyVMAP.VectorTemplateString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _PyVMAP.VectorTemplateString___setitem__(self, *args)

    def pop(self):
        return _PyVMAP.VectorTemplateString_pop(self)

    def append(self, x):
        return _PyVMAP.VectorTemplateString_append(self, x)

    def empty(self):
        return _PyVMAP.VectorTemplateString_empty(self)

    def size(self):
        return _PyVMAP.VectorTemplateString_size(self)

    def swap(self, v):
        return _PyVMAP.VectorTemplateString_swap(self, v)

    def begin(self):
        return _PyVMAP.VectorTemplateString_begin(self)

    def end(self):
        return _PyVMAP.VectorTemplateString_end(self)

    def rbegin(self):
        return _PyVMAP.VectorTemplateString_rbegin(self)

    def rend(self):
        return _PyVMAP.VectorTemplateString_rend(self)

    def clear(self):
        return _PyVMAP.VectorTemplateString_clear(self)

    def get_allocator(self):
        return _PyVMAP.VectorTemplateString_get_allocator(self)

    def pop_back(self):
        return _PyVMAP.VectorTemplateString_pop_back(self)

    def erase(self, *args):
        return _PyVMAP.VectorTemplateString_erase(self, *args)

    def __init__(self, *args):
        _PyVMAP.VectorTemplateString_swiginit(self, _PyVMAP.new_VectorTemplateString(*args))

    def push_back(self, x):
        return _PyVMAP.VectorTemplateString_push_back(self, x)

    def front(self):
        return _PyVMAP.VectorTemplateString_front(self)

    def back(self):
        return _PyVMAP.VectorTemplateString_back(self)

    def assign(self, n, x):
        return _PyVMAP.VectorTemplateString_assign(self, n, x)

    def resize(self, *args):
        return _PyVMAP.VectorTemplateString_resize(self, *args)

    def insert(self, *args):
        return _PyVMAP.VectorTemplateString_insert(self, *args)

    def reserve(self, n):
        return _PyVMAP.VectorTemplateString_reserve(self, n)

    def capacity(self):
        return _PyVMAP.VectorTemplateString_capacity(self)
    __swig_destroy__ = _PyVMAP.delete_VectorTemplateString

# Register VectorTemplateString in _PyVMAP:
_PyVMAP.VectorTemplateString_swigregister(VectorTemplateString)

class Exception(object):
    r"""


    Base class for all exceptions thrown by the VMAP.

    C++ includes: VMAPException.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        VMAP::Exception::Exception(const std::string &s="")

        Constructor with error message argument.

        Parameters:
        -----------

        s:  Error string 
        """
        _PyVMAP.Exception_swiginit(self, _PyVMAP.new_Exception(*args))
    __swig_destroy__ = _PyVMAP.delete_Exception

    def what(self):
        r"""
        const char*
        VMAP::Exception::what() const  throw () This function returns the
        exception message.

        content of myMsg 
        """
        return _PyVMAP.Exception_what(self)

    def preFix(self):
        r"""
        virtual const
        std::string VMAP::Exception::preFix()

        This function returns the exception prefix.

        Prefix to assemble exception message 
        """
        return _PyVMAP.Exception_preFix(self)

# Register Exception in _PyVMAP:
_PyVMAP.Exception_swigregister(Exception)

class ErrOutOfRange(Exception):
    r"""


    Exception: Some index is out of expected range.

    C++ includes: VMAPException.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        VMAP::ErrOutOfRange::ErrOutOfRange(const std::string &msg)

        Constructor with error message argument.

        Parameters:
        -----------

        msg:  Error string 
        """
        _PyVMAP.ErrOutOfRange_swiginit(self, _PyVMAP.new_ErrOutOfRange(msg))
    __swig_destroy__ = _PyVMAP.delete_ErrOutOfRange

    def preFix(self):
        r"""
        const std::string
        VMAP::ErrOutOfRange::preFix()

        This function returns the exception prefix.

        Prefix to assemble exception message 
        """
        return _PyVMAP.ErrOutOfRange_preFix(self)

# Register ErrOutOfRange in _PyVMAP:
_PyVMAP.ErrOutOfRange_swigregister(ErrOutOfRange)

class ErrSpaceMismatch(Exception):
    r"""


    Exception: The space dimension does not fit.

    C++ includes: VMAPException.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        VMAP::ErrSpaceMismatch::ErrSpaceMismatch(const std::string &msg)

        Constructor with error message argument.

        Parameters:
        -----------

        msg:  Error string 
        """
        _PyVMAP.ErrSpaceMismatch_swiginit(self, _PyVMAP.new_ErrSpaceMismatch(msg))
    __swig_destroy__ = _PyVMAP.delete_ErrSpaceMismatch

    def preFix(self):
        r"""
        const
        std::string VMAP::ErrSpaceMismatch::preFix()

        This function returns the exception prefix.

        Prefix to assemble exception message 
        """
        return _PyVMAP.ErrSpaceMismatch_preFix(self)

# Register ErrSpaceMismatch in _PyVMAP:
_PyVMAP.ErrSpaceMismatch_swigregister(ErrSpaceMismatch)

class ErrSizeMismatch(Exception):
    r"""


    Exception: The size of an array does not fit.

    C++ includes: VMAPException.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        VMAP::ErrSizeMismatch::ErrSizeMismatch(const std::string &msg)

        Constructor with error message argument.

        Parameters:
        -----------

        msg:  Error string 
        """
        _PyVMAP.ErrSizeMismatch_swiginit(self, _PyVMAP.new_ErrSizeMismatch(msg))
    __swig_destroy__ = _PyVMAP.delete_ErrSizeMismatch

    def preFix(self):
        r"""
        const
        std::string VMAP::ErrSizeMismatch::preFix()

        This function returns the exception prefix.

        Prefix to assemble exception message 
        """
        return _PyVMAP.ErrSizeMismatch_preFix(self)

# Register ErrSizeMismatch in _PyVMAP:
_PyVMAP.ErrSizeMismatch_swigregister(ErrSizeMismatch)

class ErrTypeMismatch(Exception):
    r"""


    Exception: The type does not fit.

    C++ includes: VMAPException.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        VMAP::ErrTypeMismatch::ErrTypeMismatch(const std::string &msg)

        Constructor with error message argument.

        Parameters:
        -----------

        msg:  Error string 
        """
        _PyVMAP.ErrTypeMismatch_swiginit(self, _PyVMAP.new_ErrTypeMismatch(msg))
    __swig_destroy__ = _PyVMAP.delete_ErrTypeMismatch

    def preFix(self):
        r"""
        const
        std::string VMAP::ErrTypeMismatch::preFix()

        This function returns the exception prefix.

        Prefix to assemble exception message 
        """
        return _PyVMAP.ErrTypeMismatch_preFix(self)

# Register ErrTypeMismatch in _PyVMAP:
_PyVMAP.ErrTypeMismatch_swigregister(ErrTypeMismatch)

class ErrUnsupported(Exception):
    r"""


    Exception: Something is not supported.

    C++ includes: VMAPException.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        VMAP::ErrUnsupported::ErrUnsupported(const std::string &msg)

        Constructor with error message argument.

        Parameters:
        -----------

        msg:  Error string 
        """
        _PyVMAP.ErrUnsupported_swiginit(self, _PyVMAP.new_ErrUnsupported(msg))
    __swig_destroy__ = _PyVMAP.delete_ErrUnsupported

    def preFix(self):
        r"""
        const
        std::string VMAP::ErrUnsupported::preFix()

        This function returns the exception prefix.

        Prefix to assemble exception message 
        """
        return _PyVMAP.ErrUnsupported_preFix(self)

# Register ErrUnsupported in _PyVMAP:
_PyVMAP.ErrUnsupported_swigregister(ErrUnsupported)

class ErrNotImplemented(Exception):
    r"""


    Exception: Something is not implemented (yet)

    C++ includes: VMAPException.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        VMAP::ErrNotImplemented::ErrNotImplemented(const std::string &msg)

        Constructor with error message argument.

        Parameters:
        -----------

        msg:  Error string 
        """
        _PyVMAP.ErrNotImplemented_swiginit(self, _PyVMAP.new_ErrNotImplemented(msg))
    __swig_destroy__ = _PyVMAP.delete_ErrNotImplemented

    def preFix(self):
        r"""
        const
        std::string VMAP::ErrNotImplemented::preFix()

        This function returns the exception prefix.

        Prefix to assemble exception message 
        """
        return _PyVMAP.ErrNotImplemented_preFix(self)

# Register ErrNotImplemented in _PyVMAP:
_PyVMAP.ErrNotImplemented_swigregister(ErrNotImplemented)

class ErrInvalid(Exception):
    r"""


    Exception: Something is wrong with the object.

    C++ includes: VMAPException.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        VMAP::ErrInvalid::ErrInvalid(const std::string &msg)

        Constructor with error message argument.

        Parameters:
        -----------

        msg:  Error string 
        """
        _PyVMAP.ErrInvalid_swiginit(self, _PyVMAP.new_ErrInvalid(msg))
    __swig_destroy__ = _PyVMAP.delete_ErrInvalid

    def preFix(self):
        r"""
        const std::string
        VMAP::ErrInvalid::preFix()

        This function returns the exception prefix.

        Prefix to assemble exception message 
        """
        return _PyVMAP.ErrInvalid_preFix(self)

# Register ErrInvalid in _PyVMAP:
_PyVMAP.ErrInvalid_swigregister(ErrInvalid)

class ErrHDF5(Exception):
    r"""


    Exception: Something is wrong with HDF5.

    C++ includes: VMAPException.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, msg):
        r"""
        VMAP::ErrHDF5::ErrHDF5(const std::string &msg)

        Constructor with error message argument.

        Parameters:
        -----------

        msg:  Error string 
        """
        _PyVMAP.ErrHDF5_swiginit(self, _PyVMAP.new_ErrHDF5(msg))
    __swig_destroy__ = _PyVMAP.delete_ErrHDF5

    def preFix(self):
        r"""
        const std::string
        VMAP::ErrHDF5::preFix()

        This function returns the exception prefix.

        Prefix to assemble exception message 
        """
        return _PyVMAP.ErrHDF5_preFix(self)

# Register ErrHDF5 in _PyVMAP:
_PyVMAP.ErrHDF5_swigregister(ErrHDF5)

class sVersion(object):
    r"""


    Basic data structure to define VMAP version information.

    sVersion structure is required to collect the version of the VMAP I/O
    being used. This structure has three integer variables & a default
    constructor. These variables are used to store the Major & Minor
    version information and the Patch number.

    The structure is referenced by VMAP::VMAPFile::writeVersion() &
    VMAP::VMAPFile::readVersion() functions declared in header file
    VMAPFile.h & defined in source code file VMAPFile.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myMajor = property(_PyVMAP.sVersion_myMajor_get, _PyVMAP.sVersion_myMajor_set)
    myMinor = property(_PyVMAP.sVersion_myMinor_get, _PyVMAP.sVersion_myMinor_set)
    myPatch = property(_PyVMAP.sVersion_myPatch_get, _PyVMAP.sVersion_myPatch_set)

    def __init__(self):
        r"""
        VMAP::sVersion::sVersion()

        The default constructor initializes NULL values to the public
        attributes of the structure. 
        """
        _PyVMAP.sVersion_swiginit(self, _PyVMAP.new_sVersion())
    __swig_destroy__ = _PyVMAP.delete_sVersion

# Register sVersion in _PyVMAP:
_PyVMAP.sVersion_swigregister(sVersion)
cvar = _PyVMAP.cvar
VMAP_VERSION_MAJOR = cvar.VMAP_VERSION_MAJOR
VMAP_VERSION_MINOR = cvar.VMAP_VERSION_MINOR
VMAP_VERSION_PATCH = cvar.VMAP_VERSION_PATCH

class sMetaInformation(object):
    r"""


    sMetaInformation structure is required to collect metadata about the
    tool generating the file.

    All member functions are declared in header file VMAP.h and defined in
    source code file VMAP.cxx, except get functions, which are defined
    inline.

    The structure is referenced by VMAPFile::writeMetaInformation() &
    VMAPFile::readMetaInformation() functions declared in header file
    VMAPFile.h & defined in source code file VMAPFile.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myExporterName = property(_PyVMAP.sMetaInformation_myExporterName_get, _PyVMAP.sMetaInformation_myExporterName_set)
    myFileDate = property(_PyVMAP.sMetaInformation_myFileDate_get, _PyVMAP.sMetaInformation_myFileDate_set)
    myFileTime = property(_PyVMAP.sMetaInformation_myFileTime_get, _PyVMAP.sMetaInformation_myFileTime_set)
    myDescription = property(_PyVMAP.sMetaInformation_myDescription_get, _PyVMAP.sMetaInformation_myDescription_set)
    myAnalysisType = property(_PyVMAP.sMetaInformation_myAnalysisType_get, _PyVMAP.sMetaInformation_myAnalysisType_set)
    myUserId = property(_PyVMAP.sMetaInformation_myUserId_get, _PyVMAP.sMetaInformation_myUserId_set)

    def __init__(self, *args):
        r"""
        VMAP::sMetaInformation::sMetaInformation(const sMetaInformation
        &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sMetaInformation_swiginit(self, _PyVMAP.new_sMetaInformation(*args))
    __swig_destroy__ = _PyVMAP.delete_sMetaInformation

    def getExporterName(self):
        r"""
        const
        char* VMAP::sMetaInformation::getExporterName() const

        This function gets the tool/solver name from structure attribute
        myExporterName.

        content of myExporterName 
        """
        return _PyVMAP.sMetaInformation_getExporterName(self)

    def setExporterName(self, s):
        r"""
        void
        VMAP::sMetaInformation::setExporterName(const char *s)

        This function sets the tool/solver name to structure attribute
        myExporterName.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sMetaInformation_setExporterName(self, s)

    def getFileDate(self):
        r"""
        const
        char* VMAP::sMetaInformation::getFileDate() const

        This function gets the file date from structure attribute myFileDate.

        content of myFileDate 
        """
        return _PyVMAP.sMetaInformation_getFileDate(self)

    def setFileDate(self, s):
        r"""
        void
        VMAP::sMetaInformation::setFileDate(const char *s)

        This function sets the file date to structure attribute myFileDate.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sMetaInformation_setFileDate(self, s)

    def getFileTime(self):
        r"""
        const
        char* VMAP::sMetaInformation::getFileTime() const

        This function gets the file time from structure attribute myFileTime.

        content of myFileTime 
        """
        return _PyVMAP.sMetaInformation_getFileTime(self)

    def setFileTime(self, s):
        r"""
        void
        VMAP::sMetaInformation::setFileTime(const char *s)

        This function sets the file time to structure attribute myFileTime.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sMetaInformation_setFileTime(self, s)

    def getDescription(self):
        r"""
        const
        char* VMAP::sMetaInformation::getDescription() const

        This function gets the file description from structure attribute
        myDescription.

        content of myDescription 
        """
        return _PyVMAP.sMetaInformation_getDescription(self)

    def setDescription(self, s):
        r"""
        void
        VMAP::sMetaInformation::setDescription(const char *s)

        This function sets the file description to structure attribute
        myDescription.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sMetaInformation_setDescription(self, s)

    def getAnalysisType(self):
        r"""
        const
        char* VMAP::sMetaInformation::getAnalysisType() const

        This function gets the analysis type of the exporter.

        content of myAnalysisType 
        """
        return _PyVMAP.sMetaInformation_getAnalysisType(self)

    def setAnalysisType(self, s):
        r"""
        void
        VMAP::sMetaInformation::setAnalysisType(const char *s)

        This function sets the analysis type of the exporter.

        Parameters:
        -----------

        s:  Character 
        """
        return _PyVMAP.sMetaInformation_setAnalysisType(self, s)

    def getUserId(self):
        r"""
        const char*
        VMAP::sMetaInformation::getUserId() const

        This function gets the user id of the exporter.

        content of myUserId 
        """
        return _PyVMAP.sMetaInformation_getUserId(self)

    def setUserId(self, s):
        r"""
        void
        VMAP::sMetaInformation::setUserId(const char *s)

        This function sets the user id of the exporter.

        Parameters:
        -----------

        s:  Character 
        """
        return _PyVMAP.sMetaInformation_setUserId(self, s)

# Register sMetaInformation in _PyVMAP:
_PyVMAP.sMetaInformation_swigregister(sMetaInformation)

class sCoordinateSystem(object):
    r"""


    sCoordinateSystem structure is used to define an arbitrary VMAP
    Coordinate System.

    All member functions are declared in header file VMAP.h and defined
    inline or in source code file VMAP.cxx.

    The structure is referenced by VMAPFile::writeCoordinateSystems() &
    VMAPFile::readCoordinateSystems() functions declared in header file
    VMAPFile.h & defined in source code file VMAPFile.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_SYSTEM = _PyVMAP.sCoordinateSystem_INVALID_SYSTEM
    CARTESIAN_LEFT_HAND = _PyVMAP.sCoordinateSystem_CARTESIAN_LEFT_HAND
    CARTESIAN_RIGHT_HAND = _PyVMAP.sCoordinateSystem_CARTESIAN_RIGHT_HAND
    NON_ORTHOGONAL = _PyVMAP.sCoordinateSystem_NON_ORTHOGONAL
    myIdentifier = property(_PyVMAP.sCoordinateSystem_myIdentifier_get, _PyVMAP.sCoordinateSystem_myIdentifier_set)
    myType = property(_PyVMAP.sCoordinateSystem_myType_get, _PyVMAP.sCoordinateSystem_myType_set)
    myReferencePoint = property(_PyVMAP.sCoordinateSystem_myReferencePoint_get, _PyVMAP.sCoordinateSystem_myReferencePoint_set)
    myAxisVectors = property(_PyVMAP.sCoordinateSystem_myAxisVectors_get, _PyVMAP.sCoordinateSystem_myAxisVectors_set)

    def __init__(self, *args):
        r"""
        VMAP::sCoordinateSystem::sCoordinateSystem(const sCoordinateSystem
        &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sCoordinateSystem_swiginit(self, _PyVMAP.new_sCoordinateSystem(*args))
    __swig_destroy__ = _PyVMAP.delete_sCoordinateSystem

    def getIdentifier(self):
        r"""
        int
        VMAP::sCoordinateSystem::getIdentifier() const

        This function gets the identifier from structure attribute
        myIdentifier.

        content of myIdentifier 
        """
        return _PyVMAP.sCoordinateSystem_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sCoordinateSystem::setIdentifier(int id)

        This function sets the identifier to structure attribute myIdentifier.

        Parameters:
        -----------

        id:  integer to store in myIdentifier member 
        """
        return _PyVMAP.sCoordinateSystem_setIdentifier(self, id)

    def getType(self):
        r"""
        int
        VMAP::sCoordinateSystem::getType() const

        This function gets the type of coordinate system.

        content of myType from enumerator eCoordinateSystemType 
        """
        return _PyVMAP.sCoordinateSystem_getType(self)

    def setType(self, id):
        r"""
        void
        VMAP::sCoordinateSystem::setType(int id)

        This function sets the type of coordinate system.

        Parameters:
        -----------

        id:  numerator eCoordinateSystemType 
        """
        return _PyVMAP.sCoordinateSystem_setType(self, id)

    def getReferencePoint(self, *args):
        r"""
        void VMAP::sCoordinateSystem::getReferencePoint(double &x, double &y,
        double &z) const

        This function gets the reference point from structure attribute
        myReferencePoint.

        Parameters:
        -----------

        x:  Double float read from the myReferencePoint[0]

        y:  Double float read from the myReferencePoint[1]

        z:  Double float read from the myReferencePoint[2] 
        """
        return _PyVMAP.sCoordinateSystem_getReferencePoint(self, *args)

    def setReferencePoint(self, *args):
        r"""
        void VMAP::sCoordinateSystem::setReferencePoint(double x, double y,
        double z)

        This function sets the reference point to structure attribute
        myReferencePoint.

        Parameters:
        -----------

        x:  Double float read from VMAP File

        y:  Double float read from VMAP File

        z:  Double float read from VMAP File 
        """
        return _PyVMAP.sCoordinateSystem_setReferencePoint(self, *args)

    def getAxisVector(self, *args):
        r"""
        void
        VMAP::sCoordinateSystem::getAxisVector(int index, double &x, double
        &y, double &z) const

        This function gets the axis vector from structure attribute
        myAxisVectors.

        Parameters:
        -----------

        index:  counter for myAxisVectors array

        x:  Double float read from the myAxisVectors

        y:  Double float read from the myAxisVectors

        z:  Double float read from the myAxisVectors 
        """
        return _PyVMAP.sCoordinateSystem_getAxisVector(self, *args)

    def setAxisVector(self, *args):
        r"""
        void
        VMAP::sCoordinateSystem::setAxisVector(int index, double x, double y,
        double z)

        This function sets the axis vector to structure attribute
        myAxisVectors.

        Parameters:
        -----------

        index:  counter for myAxisVectors array

        x:  Double float read from the VMAP File

        y:  Double float read from the VMAP File

        z:  Double float read from the VMAP File 
        """
        return _PyVMAP.sCoordinateSystem_setAxisVector(self, *args)

# Register sCoordinateSystem in _PyVMAP:
_PyVMAP.sCoordinateSystem_swigregister(sCoordinateSystem)

class sBaseUnit(object):
    r"""


    sBaseUnit provides attributes to define a single unit.

    This is a helper structure to define struct sUnitSystem. All member
    functions are declared in header file VMAP.h. Some functions are
    defined inline and others are defined in source code file VMAP.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myIdentifier = property(_PyVMAP.sBaseUnit_myIdentifier_get, _PyVMAP.sBaseUnit_myIdentifier_set)
    mySIScale = property(_PyVMAP.sBaseUnit_mySIScale_get, _PyVMAP.sBaseUnit_mySIScale_set)
    mySIShift = property(_PyVMAP.sBaseUnit_mySIShift_get, _PyVMAP.sBaseUnit_mySIShift_set)
    myUnitSymbol = property(_PyVMAP.sBaseUnit_myUnitSymbol_get, _PyVMAP.sBaseUnit_myUnitSymbol_set)
    myUnitQuantity = property(_PyVMAP.sBaseUnit_myUnitQuantity_get, _PyVMAP.sBaseUnit_myUnitQuantity_set)

    def __init__(self, *args):
        r"""
        VMAP::sBaseUnit::sBaseUnit(const sBaseUnit &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sBaseUnit_swiginit(self, _PyVMAP.new_sBaseUnit(*args))
    __swig_destroy__ = _PyVMAP.delete_sBaseUnit

    def getIdentifier(self):
        r"""
        int
        VMAP::sBaseUnit::getIdentifier() const

        This function gets the identifier name from structure attribute
        myIdentifier.

        content of myIdentifier 
        """
        return _PyVMAP.sBaseUnit_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sBaseUnit::setIdentifier(int id)

        This function sets the identifier to structure attribute myIdentifier.

        Parameters:
        -----------

        id:  integer read from VMAP File 
        """
        return _PyVMAP.sBaseUnit_setIdentifier(self, id)

    def getSIScale(self):
        r"""
        double
        VMAP::sBaseUnit::getSIScale() const

        This function gets the SI scale factor from structure attribute
        mySIScale.

        content of mySIScale 
        """
        return _PyVMAP.sBaseUnit_getSIScale(self)

    def setSIScale(self, scale):
        r"""
        void
        VMAP::sBaseUnit::setSIScale(double scale)

        This function sets the SI scale factor to structure attribute
        mySIScale.

        Parameters:
        -----------

        scale:  Double float read from VMAP File 
        """
        return _PyVMAP.sBaseUnit_setSIScale(self, scale)

    def getSIShift(self):
        r"""
        double
        VMAP::sBaseUnit::getSIShift() const

        This function gets the SI shift factor from structure attribute
        mySIShift.

        content of mySIShift 
        """
        return _PyVMAP.sBaseUnit_getSIShift(self)

    def setSIShift(self, shift):
        r"""
        void
        VMAP::sBaseUnit::setSIShift(double shift)

        This function sets the SI shift factor to structure attribute
        mySIShift.

        Parameters:
        -----------

        shift:  Double float read from VMAP File 
        """
        return _PyVMAP.sBaseUnit_setSIShift(self, shift)

    def getUnitSymbol(self):
        r"""
        const char*
        VMAP::sBaseUnit::getUnitSymbol() const

        This function gets the unit symbol from structure attribute
        myUnitSymbol.

        content of myUnitSymbol 
        """
        return _PyVMAP.sBaseUnit_getUnitSymbol(self)

    def setUnitSymbol(self, s):
        r"""
        void
        VMAP::sBaseUnit::setUnitSymbol(const char *s)

        This function sets the unit symbol to structure attribute
        myUnitSymbol.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sBaseUnit_setUnitSymbol(self, s)

    def getUnitQuantity(self):
        r"""
        const char*
        VMAP::sBaseUnit::getUnitQuantity() const

        This function gets the unit symbol from structure attribute
        myUnitQuantity.

        content of myUnitSymbol 
        """
        return _PyVMAP.sBaseUnit_getUnitQuantity(self)

    def setUnitQuantity(self, s):
        r"""
        void
        VMAP::sBaseUnit::setUnitQuantity(const char *s)

        This function sets the unit quantity to structure attribute
        myUnitQuantity.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sBaseUnit_setUnitQuantity(self, s)

# Register sBaseUnit in _PyVMAP:
_PyVMAP.sBaseUnit_swigregister(sBaseUnit)

class sUnitSystem(object):
    r"""


    sUnitSystem is a data structure to define VMAP Unit System.

    This structure uses the struct sBaseUnit as the type for its
    attributes. All units are set to the SI System by default. This
    structure also has constructors, destructor and get functions. All
    member functions are declared and defined in header file VMAP.h,
    except the copy constructor which is defined in source code file
    VMAP.cxx.

    The structure is referenced by VMAPFile::writeUnitSystem() &
    VMAPFile::readUnitSystem() functions declared in header file
    VMAPFile.h & defined in source code file VMAPFile.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myLengthUnit = property(_PyVMAP.sUnitSystem_myLengthUnit_get, _PyVMAP.sUnitSystem_myLengthUnit_set)
    myMassUnit = property(_PyVMAP.sUnitSystem_myMassUnit_get, _PyVMAP.sUnitSystem_myMassUnit_set)
    myTimeUnit = property(_PyVMAP.sUnitSystem_myTimeUnit_get, _PyVMAP.sUnitSystem_myTimeUnit_set)
    myCurrentUnit = property(_PyVMAP.sUnitSystem_myCurrentUnit_get, _PyVMAP.sUnitSystem_myCurrentUnit_set)
    myTemperatureUnit = property(_PyVMAP.sUnitSystem_myTemperatureUnit_get, _PyVMAP.sUnitSystem_myTemperatureUnit_set)
    myAmountOfSubstanceUnit = property(_PyVMAP.sUnitSystem_myAmountOfSubstanceUnit_get, _PyVMAP.sUnitSystem_myAmountOfSubstanceUnit_set)
    myLuminousIntensityUnit = property(_PyVMAP.sUnitSystem_myLuminousIntensityUnit_get, _PyVMAP.sUnitSystem_myLuminousIntensityUnit_set)

    def __init__(self, *args):
        r"""
        VMAP::sUnitSystem::sUnitSystem(const sUnitSystem &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sUnitSystem_swiginit(self, _PyVMAP.new_sUnitSystem(*args))
    __swig_destroy__ = _PyVMAP.delete_sUnitSystem

    def getLengthUnit(self):
        r"""
        sBaseUnit&
        VMAP::sUnitSystem::getLengthUnit()

        This function gets the length unit from structure attribute
        myLengthUnit.

        content of myLengthUnit 
        """
        return _PyVMAP.sUnitSystem_getLengthUnit(self)

    def getMassUnit(self):
        r"""
        sBaseUnit&
        VMAP::sUnitSystem::getMassUnit()

        This function gets the mass unit from structure attribute myMassUnit.

        content of myMassUnit 
        """
        return _PyVMAP.sUnitSystem_getMassUnit(self)

    def getTimeUnit(self):
        r"""
        sBaseUnit&
        VMAP::sUnitSystem::getTimeUnit()

        This function gets the time unit from structure attribute myTimeUnit.

        content of myTimeUnit 
        """
        return _PyVMAP.sUnitSystem_getTimeUnit(self)

    def getCurrentUnit(self):
        r"""
        sBaseUnit&
        VMAP::sUnitSystem::getCurrentUnit()

        This function gets the current unit from structure attribute
        myCurrentUnit.

        content of myCurrentUnit 
        """
        return _PyVMAP.sUnitSystem_getCurrentUnit(self)

    def getTemperatureUnit(self):
        r"""
        sBaseUnit& VMAP::sUnitSystem::getTemperatureUnit()

        This function gets the temperature unit from structure attribute
        myTemperatureUnit.

        content of myTemperatureUnit 
        """
        return _PyVMAP.sUnitSystem_getTemperatureUnit(self)

    def getAmountOfSubstanceUnit(self):
        r"""
        sBaseUnit& VMAP::sUnitSystem::getAmountOfSubstanceUnit()

        This function gets the amount of substance unit from structure
        attribute myAmountOfSubstanceUnit.

        content of myAmountOfSubstanceUnit 
        """
        return _PyVMAP.sUnitSystem_getAmountOfSubstanceUnit(self)

    def getLuminousIntensityUnit(self):
        r"""
        sBaseUnit& VMAP::sUnitSystem::getLuminousIntensityUnit()

        This function gets the luminous intensity unit from structure
        attribute myLuminousIntensityUnit.

        content of myLuminousIntensityUnit 
        """
        return _PyVMAP.sUnitSystem_getLuminousIntensityUnit(self)

# Register sUnitSystem in _PyVMAP:
_PyVMAP.sUnitSystem_swigregister(sUnitSystem)

class sUnit(object):
    r"""


    sUnit structure is used to define the derived VMAP units.

    This structure also has constructors, destructor and get & set
    functions. All member functions are declared in header file VMAP.h.
    All functions are defined in source code file VMAP.cxx, except get
    function which is inline.

    The structure is referenced by VMAPFile::writeUnits() &
    VMAPFile::readUnits() functions declared in header file VMAPFile.h &
    defined in source code file VMAPFile.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myIdentifier = property(_PyVMAP.sUnit_myIdentifier_get, _PyVMAP.sUnit_myIdentifier_set)
    myUnitSymbol = property(_PyVMAP.sUnit_myUnitSymbol_get, _PyVMAP.sUnit_myUnitSymbol_set)
    myUnitDimension = property(_PyVMAP.sUnit_myUnitDimension_get, _PyVMAP.sUnit_myUnitDimension_set)

    def __init__(self, *args):
        r"""
        VMAP::sUnit::sUnit(const
        sUnit &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sUnit_swiginit(self, _PyVMAP.new_sUnit(*args))
    __swig_destroy__ = _PyVMAP.delete_sUnit

    def getIdentifier(self):
        r"""
        int
        VMAP::sUnit::getIdentifier() const

        This function returns the unit identifier from myIdentifier.

        content of myIdentifier 
        """
        return _PyVMAP.sUnit_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sUnit::setIdentifier(int id)

        This function sets the unit identifier.

        Parameters:
        -----------

        id:  integer to assigne myIdentifier content 
        """
        return _PyVMAP.sUnit_setIdentifier(self, id)

    def getUnitSymbol(self):
        r"""
        const char*
        VMAP::sUnit::getUnitSymbol() const

        This function gets the unit symbol from structure attribute
        myUnitSymbol.

        content of myUnitSymbol 
        """
        return _PyVMAP.sUnit_getUnitSymbol(self)

    def setUnitSymbol(self, s):
        r"""
        void
        VMAP::sUnit::setUnitSymbol(const char *s)

        This function sets the unit symbol to structure attribute
        myUnitSymbol.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sUnit_setUnitSymbol(self, s)

    def getUnitDimension(self, dimensions):
        r"""
        void
        VMAP::sUnit::getUnitDimension(std::vector< int > &dimensions) const

        This function gets the unit dimension vector in terms of base unit
        system.

        Parameters:
        -----------

        dimensions:  powers vector in sUnitSystem units 
        """
        return _PyVMAP.sUnit_getUnitDimension(self, dimensions)

    def setUnitDimension(self, dimensions):
        r"""
        void
        VMAP::sUnit::setUnitDimension(const std::vector< int > &dimensions)

        This function sets the unit dimension vector in terms of base unit
        system

        Parameters:
        -----------

        dimensions:  powers vector in sUnitSystem units 
        """
        return _PyVMAP.sUnit_setUnitDimension(self, dimensions)

# Register sUnit in _PyVMAP:
_PyVMAP.sUnit_swigregister(sUnit)

class sPointsBlock(object):
    r"""


    sPointsBlock structure stores the three dimensional coordinates.

    The structure attributes are then used by the sElement structure to
    store the connectivity. The structure has default constructors &
    destructor and member functions. All the member functions are defined
    in header file VMAP.h and declared in source code file VMAP.cxx.

    The structure is referenced by VMAPFile::writePointsBlock() &
    VMAPFile::readPointsBlock() functions declared in header file
    VMAPFile.h & defined in source code file VMAPFile.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myCoordinateSystem = property(_PyVMAP.sPointsBlock_myCoordinateSystem_get, _PyVMAP.sPointsBlock_myCoordinateSystem_set)
    mySize = property(_PyVMAP.sPointsBlock_mySize_get, _PyVMAP.sPointsBlock_mySize_set)
    myIdentifiers = property(_PyVMAP.sPointsBlock_myIdentifiers_get, _PyVMAP.sPointsBlock_myIdentifiers_set)
    myCoordinates = property(_PyVMAP.sPointsBlock_myCoordinates_get, _PyVMAP.sPointsBlock_myCoordinates_set)

    def __init__(self, *args):
        r"""
        VMAP::sPointsBlock::sPointsBlock(const sPointsBlock &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sPointsBlock_swiginit(self, _PyVMAP.new_sPointsBlock(*args))
    __swig_destroy__ = _PyVMAP.delete_sPointsBlock

    def getCoordinateSystem(self):
        r"""
        int
        VMAP::sPointsBlock::getCoordinateSystem() const

        This function gets the coordinate system to structure attribute
        myCoordinateSystem.

        Integer id of the coordinate system 
        """
        return _PyVMAP.sPointsBlock_getCoordinateSystem(self)

    def setCoordinateSystem(self, id):
        r"""
        void
        VMAP::sPointsBlock::setCoordinateSystem(int id)

        This function sets the coordinate system to structure attribute
        myCoordinateSystem.

        Parameters:
        -----------

        id:  Integer id of the coordinate system 
        """
        return _PyVMAP.sPointsBlock_setCoordinateSystem(self, id)

    def getSize(self):
        r"""
        unsigned long
        VMAP::sPointsBlock::getSize() const

        This function returns the number of coordinates stores in the
        structure.

        Number of data stored 
        """
        return _PyVMAP.sPointsBlock_getSize(self)

    def getPoint(self, *args):
        r"""
        void
        VMAP::sPointsBlock::getPoint(unsigned long index, int &identifier,
        double &x, double &y, double &z) const

        This function gets the point coordinates from structure attribute
        myIdentifiers & myCoordinates, respectively.

        Parameters:
        -----------

        index:  Index of point requested

        identifier:  Identifier of node

        x:  X Coordinate of node

        y:  Y Coordinate of node

        z:  Z Coordinate of node 
        """
        return _PyVMAP.sPointsBlock_getPoint(self, *args)

    def setPoint(self, *args):
        r"""
        void
        VMAP::sPointsBlock::setPoint(unsigned long index, int identifier,
        double x, double y, double z)

        This function sets the point index & coordinates to structure
        attributes myIdentifiers & myCoordinates.

        Parameters:
        -----------

        index:  Index read from VMAP File

        identifier:  Integer read from VMAP File

        x:  Double read from VMAP File

        y:  Double read from VMAP File

        z:  Double read from VMAP File 
        """
        return _PyVMAP.sPointsBlock_setPoint(self, *args)

# Register sPointsBlock in _PyVMAP:
_PyVMAP.sPointsBlock_swigregister(sPointsBlock)

class sIntegrationType(object):
    r"""


    sIntegrationType structure defines VMAP element integration type.

    The structure has default constructors & destructor and member
    functions. All the member functions are declared in header file
    VMAP.h. Some member functions are defined inline and others in source
    code file VMAP.cxx.

    The structure is referenced by VMAPFile::writeIntegrationTypes() &
    VMAPFile::readIntegrationTypes() functions declared in header file
    VMAPFile.h & defined in source code file VMAPFile.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myIdentifier = property(_PyVMAP.sIntegrationType_myIdentifier_get, _PyVMAP.sIntegrationType_myIdentifier_set)
    myTypeName = property(_PyVMAP.sIntegrationType_myTypeName_get, _PyVMAP.sIntegrationType_myTypeName_set)
    myNumberOfPoints = property(_PyVMAP.sIntegrationType_myNumberOfPoints_get, _PyVMAP.sIntegrationType_myNumberOfPoints_set)
    myDimension = property(_PyVMAP.sIntegrationType_myDimension_get, _PyVMAP.sIntegrationType_myDimension_set)
    myOffset = property(_PyVMAP.sIntegrationType_myOffset_get, _PyVMAP.sIntegrationType_myOffset_set)
    myAbscissas = property(_PyVMAP.sIntegrationType_myAbscissas_get, _PyVMAP.sIntegrationType_myAbscissas_set)
    myAbscissasHandle = property(_PyVMAP.sIntegrationType_myAbscissasHandle_get, _PyVMAP.sIntegrationType_myAbscissasHandle_set)
    myWeights = property(_PyVMAP.sIntegrationType_myWeights_get, _PyVMAP.sIntegrationType_myWeights_set)
    myWeightsHandle = property(_PyVMAP.sIntegrationType_myWeightsHandle_get, _PyVMAP.sIntegrationType_myWeightsHandle_set)
    mySubTypes = property(_PyVMAP.sIntegrationType_mySubTypes_get, _PyVMAP.sIntegrationType_mySubTypes_set)
    mySubTypesHandle = property(_PyVMAP.sIntegrationType_mySubTypesHandle_get, _PyVMAP.sIntegrationType_mySubTypesHandle_set)

    def __init__(self, *args):
        r"""
        VMAP::sIntegrationType::sIntegrationType(const sIntegrationType
        &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sIntegrationType_swiginit(self, _PyVMAP.new_sIntegrationType(*args))
    __swig_destroy__ = _PyVMAP.delete_sIntegrationType

    def getIdentifier(self):
        r"""
        int
        VMAP::sIntegrationType::getIdentifier() const

        This function gets the identifier from structure attribute
        myIdentifier.

        content of myIdentifier 
        """
        return _PyVMAP.sIntegrationType_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sIntegrationType::setIdentifier(int id)

        This function sets the identifier to structure attribute myIdentifier.

        Parameters:
        -----------

        id:  Integer read from VMAP File 
        """
        return _PyVMAP.sIntegrationType_setIdentifier(self, id)

    def getTypeName(self):
        r"""
        const
        char* VMAP::sIntegrationType::getTypeName() const

        This function gets the type name from structure attribute myTypeName.

        content of myTypeName 
        """
        return _PyVMAP.sIntegrationType_getTypeName(self)

    def setTypeName(self, s):
        r"""
        void
        VMAP::sIntegrationType::setTypeName(const char *s)

        This function sets the type name to structure attribute myTypeName.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sIntegrationType_setTypeName(self, s)

    def getNumberOfPoints(self):
        r"""
        int
        VMAP::sIntegrationType::getNumberOfPoints() const

        This function gets the total number of integration points from
        structure attribute myNumberOfPoints.

        content of myNumberOfPoints 
        """
        return _PyVMAP.sIntegrationType_getNumberOfPoints(self)

    def getDimension(self):
        r"""
        int
        VMAP::sIntegrationType::getDimension() const

        This function gets the dimension from structure attribute myDimension.

        content of myDimension 
        """
        return _PyVMAP.sIntegrationType_getDimension(self)

    def getOffset(self):
        r"""
        double
        VMAP::sIntegrationType::getOffset() const

        This function gets the shell offeset paramter from structure attribute
        myOffset.

        content of myOffset 
        """
        return _PyVMAP.sIntegrationType_getOffset(self)

    def setOffset(self, offset):
        r"""
        void
        VMAP::sIntegrationType::setOffset(double offset)

        This function sets the shell offset paramter to structure attribute
        myOffset.

        Parameters:
        -----------

        offset:  Double float read from VMAP File 
        """
        return _PyVMAP.sIntegrationType_setOffset(self, offset)

    def getSubTypes(self):
        r"""
        const
        std::vector<int>& VMAP::sIntegrationType::getSubTypes() const

        This function gets sub intergration type references from structure
        attribute mySubTypes.

        content of mySubTypes 
        """
        return _PyVMAP.sIntegrationType_getSubTypes(self)

    def setSubTypes(self, types):
        r"""
        void
        VMAP::sIntegrationType::setSubTypes(const std::vector< int > &types)

        This function sets the sub integration type references to structure
        attribute mySubTypes.

        Parameters:
        -----------

        types:  Integer vector read from VMAP File 
        """
        return _PyVMAP.sIntegrationType_setSubTypes(self, types)

    def getAbscissasAndWeights(self, dimension, abscissas, weights):
        r"""
        void VMAP::sIntegrationType::getAbscissasAndWeights(int &dimension,
        std::vector< double > &abscissas, std::vector< double > &weights)
        const

        This function gets dimension, abscissas & weights from structure
        attributes myDimension, myAbscissas & myWeights.

        content of myDimension, myAbscissas, myWeights 
        """
        return _PyVMAP.sIntegrationType_getAbscissasAndWeights(self, dimension, abscissas, weights)

    def setAbscissasAndWeights(self, dimension, abscissas, weights):
        r"""
        void VMAP::sIntegrationType::setAbscissasAndWeights(int dimension,
        const std::vector< double > &abscissas, const std::vector< double >
        &weights)

        This function sets the dimension, abscissas & weights to structure
        attributes myDimension, myAbscissas & myWeights.

        Parameters:
        -----------

        dimension:  Integer vector read from VMAP File

        abscissas:  Double vector read from VMAP File

        weights:  Double vector read from VMAP File 
        """
        return _PyVMAP.sIntegrationType_setAbscissasAndWeights(self, dimension, abscissas, weights)

    def setHDF5Handles(self):
        r"""
        void
        VMAP::sIntegrationType::setHDF5Handles()

        This function sets the HDF5 handles before writing to VMAP file. 
        """
        return _PyVMAP.sIntegrationType_setHDF5Handles(self)

# Register sIntegrationType in _PyVMAP:
_PyVMAP.sIntegrationType_swigregister(sIntegrationType)

class sSection(object):
    r"""


    Data structure to define a VMAP section information.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    INVALID_SECTION = _PyVMAP.sSection_INVALID_SECTION
    SHELL_SECTION = _PyVMAP.sSection_SHELL_SECTION
    SOLID_SECTION = _PyVMAP.sSection_SOLID_SECTION
    BEAM_SECTION = _PyVMAP.sSection_BEAM_SECTION
    MEMBRANE_SECTION = _PyVMAP.sSection_MEMBRANE_SECTION
    INVALID_THICKNESS = _PyVMAP.sSection_INVALID_THICKNESS
    NODAL_THICKNESS = _PyVMAP.sSection_NODAL_THICKNESS
    ELEMENT_THICKNESS = _PyVMAP.sSection_ELEMENT_THICKNESS
    myIdentifier = property(_PyVMAP.sSection_myIdentifier_get, _PyVMAP.sSection_myIdentifier_set)
    myName = property(_PyVMAP.sSection_myName_get, _PyVMAP.sSection_myName_set)
    myType = property(_PyVMAP.sSection_myType_get, _PyVMAP.sSection_myType_set)
    myMaterial = property(_PyVMAP.sSection_myMaterial_get, _PyVMAP.sSection_myMaterial_set)
    myCoordinateSystem = property(_PyVMAP.sSection_myCoordinateSystem_get, _PyVMAP.sSection_myCoordinateSystem_set)
    myIntegrationType = property(_PyVMAP.sSection_myIntegrationType_get, _PyVMAP.sSection_myIntegrationType_set)
    myThicknessType = property(_PyVMAP.sSection_myThicknessType_get, _PyVMAP.sSection_myThicknessType_set)

    def __init__(self, *args):
        r"""
        VMAP::sSection::sSection(const sSection &other)

        Copy constructor. 
        """
        _PyVMAP.sSection_swiginit(self, _PyVMAP.new_sSection(*args))
    __swig_destroy__ = _PyVMAP.delete_sSection

    def getIdentifier(self):
        r"""
        int
        VMAP::sSection::getIdentifier() const

        Get geometry set identifier.

        Returns value of myIdentifier 
        """
        return _PyVMAP.sSection_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sSection::setIdentifier(int id)

        Set geometry set identifier.

        Parameters:
        -----------

        id:  Sets myIdentifier to new value 
        """
        return _PyVMAP.sSection_setIdentifier(self, id)

    def getName(self):
        r"""
        const char*
        VMAP::sSection::getName() const

        Get the name of the section.

        Returns value of myName 
        """
        return _PyVMAP.sSection_getName(self)

    def setName(self, s):
        r"""
        void
        VMAP::sSection::setName(const char *s)

        Set the name of the section.

        Parameters:
        -----------

        s:  Sets myName to new value 
        """
        return _PyVMAP.sSection_setName(self, s)

    def getType(self):
        r"""
        int
        VMAP::sSection::getType() const

        Get the type of section.

        Returns value of myType 
        """
        return _PyVMAP.sSection_getType(self)

    def setType(self, type):
        r"""
        void
        VMAP::sSection::setType(int type)

        Set the type of section.

        Parameters:
        -----------

        type:  Sets myType to new value 
        """
        return _PyVMAP.sSection_setType(self, type)

    def getMaterial(self):
        r"""
        int
        VMAP::sSection::getMaterial() const

        Get the material id of the section.

        Returns value of myMaterial 
        """
        return _PyVMAP.sSection_getMaterial(self)

    def setMaterial(self, mid):
        r"""
        void
        VMAP::sSection::setMaterial(int mid)

        Set the material id of the section.

        Parameters:
        -----------

        mid:  Sets myMaterial to new value 
        """
        return _PyVMAP.sSection_setMaterial(self, mid)

    def getCoordinateSystem(self):
        r"""
        int
        VMAP::sSection::getCoordinateSystem() const

        Get the coordinate system of the section.

        Returns value of myCoordinateSystem 
        """
        return _PyVMAP.sSection_getCoordinateSystem(self)

    def setCoordinateSystem(self, cid):
        r"""
        void
        VMAP::sSection::setCoordinateSystem(int cid)

        Set the coordinate system of the section.

        Parameters:
        -----------

        cid:  Sets myCoordinateSystem to new value 
        """
        return _PyVMAP.sSection_setCoordinateSystem(self, cid)

    def getIntegrationType(self):
        r"""
        int
        VMAP::sSection::getIntegrationType() const

        Get the integration type of the section.

        Returns value of myIntegrationType 
        """
        return _PyVMAP.sSection_getIntegrationType(self)

    def setIntegrationType(self, type):
        r"""
        void
        VMAP::sSection::setIntegrationType(int type)

        Set the integration type of the section.

        Parameters:
        -----------

        type:  Sets myIntegrationType to new value 
        """
        return _PyVMAP.sSection_setIntegrationType(self, type)

    def getThicknessType(self):
        r"""
        int
        VMAP::sSection::getThicknessType() const

        Get the thickness type of the section.

        Returns value of myThicknessType 
        """
        return _PyVMAP.sSection_getThicknessType(self)

    def setThicknessType(self, type):
        r"""
        void
        VMAP::sSection::setThicknessType(int type)

        Set the thickness type of the section.

        Parameters:
        -----------

        type:  Sets myThicknessType to new value 
        """
        return _PyVMAP.sSection_setThicknessType(self, type)

# Register sSection in _PyVMAP:
_PyVMAP.sSection_swigregister(sSection)

class sElementType(object):
    r"""


    sElementType structure defines VMAP element type.

    The structure has default constructors & destructor and member
    functions. All the member functions are declared in header file
    VMAP.h. Some member functions are defined inline and others in source
    code file VMAP.cxx.

    The structure is referenced by VMAPFile::writeElementTypes() &
    VMAPFile::readElementTypes() functions declared in header file
    VMAPFile.h & defined in source code file VMAPFile.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ELEM_INVALID = _PyVMAP.sElementType_ELEM_INVALID
    ELEM_1D = _PyVMAP.sElementType_ELEM_1D
    ELEM_2D = _PyVMAP.sElementType_ELEM_2D
    ELEM_3D = _PyVMAP.sElementType_ELEM_3D
    ELEM_AX = _PyVMAP.sElementType_ELEM_AX
    SHAPE_INVALID = _PyVMAP.sElementType_SHAPE_INVALID
    POINT = _PyVMAP.sElementType_POINT
    LINE_2 = _PyVMAP.sElementType_LINE_2
    LINE_3 = _PyVMAP.sElementType_LINE_3
    LINE_4 = _PyVMAP.sElementType_LINE_4
    TRIANGLE_3 = _PyVMAP.sElementType_TRIANGLE_3
    TRIANGLE_4 = _PyVMAP.sElementType_TRIANGLE_4
    TRIANGLE_6 = _PyVMAP.sElementType_TRIANGLE_6
    QUAD_4 = _PyVMAP.sElementType_QUAD_4
    QUAD_8 = _PyVMAP.sElementType_QUAD_8
    QUAD_9 = _PyVMAP.sElementType_QUAD_9
    TETRAHEDRON_4 = _PyVMAP.sElementType_TETRAHEDRON_4
    TETRAHEDRON_5 = _PyVMAP.sElementType_TETRAHEDRON_5
    TETRAHEDRON_10 = _PyVMAP.sElementType_TETRAHEDRON_10
    TETRAHEDRON_11 = _PyVMAP.sElementType_TETRAHEDRON_11
    PYRAMID_5 = _PyVMAP.sElementType_PYRAMID_5
    PYRAMID_6 = _PyVMAP.sElementType_PYRAMID_6
    PYRAMID_13 = _PyVMAP.sElementType_PYRAMID_13
    WEDGE_6 = _PyVMAP.sElementType_WEDGE_6
    WEDGE_15 = _PyVMAP.sElementType_WEDGE_15
    HEXAHEDRON_8 = _PyVMAP.sElementType_HEXAHEDRON_8
    HEXAHEDRON_9 = _PyVMAP.sElementType_HEXAHEDRON_9
    HEXAHEDRON_20 = _PyVMAP.sElementType_HEXAHEDRON_20
    HEXAHEDRON_21 = _PyVMAP.sElementType_HEXAHEDRON_21
    HEXAHEDRON_27 = _PyVMAP.sElementType_HEXAHEDRON_27
    POLYGON = _PyVMAP.sElementType_POLYGON
    POLYHEDRON = _PyVMAP.sElementType_POLYHEDRON
    USER_DEFINED = _PyVMAP.sElementType_USER_DEFINED
    CONSTANT = _PyVMAP.sElementType_CONSTANT
    LINEAR = _PyVMAP.sElementType_LINEAR
    BILINEAR = _PyVMAP.sElementType_BILINEAR
    TRILINEAR = _PyVMAP.sElementType_TRILINEAR
    QUADRATIC = _PyVMAP.sElementType_QUADRATIC
    BIQUADRATIC = _PyVMAP.sElementType_BIQUADRATIC
    TRIQUADRATIC = _PyVMAP.sElementType_TRIQUADRATIC
    CUBIC = _PyVMAP.sElementType_CUBIC
    BICUBIC = _PyVMAP.sElementType_BICUBIC
    TRICUBIC = _PyVMAP.sElementType_TRICUBIC
    SPLINE = _PyVMAP.sElementType_SPLINE
    myIdentifier = property(_PyVMAP.sElementType_myIdentifier_get, _PyVMAP.sElementType_myIdentifier_set)
    myTypeName = property(_PyVMAP.sElementType_myTypeName_get, _PyVMAP.sElementType_myTypeName_set)
    myTypeDescription = property(_PyVMAP.sElementType_myTypeDescription_get, _PyVMAP.sElementType_myTypeDescription_set)
    myNumberOfNodes = property(_PyVMAP.sElementType_myNumberOfNodes_get, _PyVMAP.sElementType_myNumberOfNodes_set)
    myDimension = property(_PyVMAP.sElementType_myDimension_get, _PyVMAP.sElementType_myDimension_set)
    myShapeType = property(_PyVMAP.sElementType_myShapeType_get, _PyVMAP.sElementType_myShapeType_set)
    myInterpolationType = property(_PyVMAP.sElementType_myInterpolationType_get, _PyVMAP.sElementType_myInterpolationType_set)
    myIntegrationType = property(_PyVMAP.sElementType_myIntegrationType_get, _PyVMAP.sElementType_myIntegrationType_set)
    myNumberOfNormalComponents = property(_PyVMAP.sElementType_myNumberOfNormalComponents_get, _PyVMAP.sElementType_myNumberOfNormalComponents_set)
    myNumberOfShearComponents = property(_PyVMAP.sElementType_myNumberOfShearComponents_get, _PyVMAP.sElementType_myNumberOfShearComponents_set)
    myConnectivity = property(_PyVMAP.sElementType_myConnectivity_get, _PyVMAP.sElementType_myConnectivity_set)
    myConnectivityHandle = property(_PyVMAP.sElementType_myConnectivityHandle_get, _PyVMAP.sElementType_myConnectivityHandle_set)
    myFaceConnectivity = property(_PyVMAP.sElementType_myFaceConnectivity_get, _PyVMAP.sElementType_myFaceConnectivity_set)
    myFaceConnectivityHandle = property(_PyVMAP.sElementType_myFaceConnectivityHandle_get, _PyVMAP.sElementType_myFaceConnectivityHandle_set)

    def __init__(self, *args):
        r"""
        VMAP::sElementType::sElementType(const sElementType &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sElementType_swiginit(self, _PyVMAP.new_sElementType(*args))
    __swig_destroy__ = _PyVMAP.delete_sElementType

    def getIdentifier(self):
        r"""
        int
        VMAP::sElementType::getIdentifier() const

        This function gets the identifier from structure attribute
        myIdentifier.

        content of myIdentifier 
        """
        return _PyVMAP.sElementType_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sElementType::setIdentifier(int id)

        This function sets the identifier to structure attribute myIdentifier.

        Parameters:
        -----------

        id:  Integer read from VMAP File 
        """
        return _PyVMAP.sElementType_setIdentifier(self, id)

    def getTypeName(self):
        r"""
        const char*
        VMAP::sElementType::getTypeName() const

        This function gets the type name from structure attribute myTypeName.

        content of myTypeName 
        """
        return _PyVMAP.sElementType_getTypeName(self)

    def setTypeName(self, s):
        r"""
        void
        VMAP::sElementType::setTypeName(const char *s)

        This function sets the type name to structure attribute myTypeName.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sElementType_setTypeName(self, s)

    def getTypeDescription(self):
        r"""
        const
        char* VMAP::sElementType::getTypeDescription() const

        This function gets the type description from structure attribute
        myTypeDescription.

        content of myTypeDescription 
        """
        return _PyVMAP.sElementType_getTypeDescription(self)

    def setTypeDescription(self, s):
        r"""
        void
        VMAP::sElementType::setTypeDescription(const char *s)

        This function sets the type description to structure attribute
        myTypeDescription.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sElementType_setTypeDescription(self, s)

    def getNumberOfNodes(self):
        r"""
        int
        VMAP::sElementType::getNumberOfNodes() const

        This function gets total number of nodes from structure attribute
        myNumberOfNodes.

        content of myNumberOfNodes 
        """
        return _PyVMAP.sElementType_getNumberOfNodes(self)

    def setNumberOfNodes(self, value):
        r"""
        void
        VMAP::sElementType::setNumberOfNodes(int value)

        This function sets the total number of nodes to structure attribute
        myNumberOfNodes.

        Parameters:
        -----------

        value:  Integer read from VMAP File 
        """
        return _PyVMAP.sElementType_setNumberOfNodes(self, value)

    def getDimension(self):
        r"""
        int
        VMAP::sElementType::getDimension() const

        This function gets element dimension.

        content of myDimension 
        """
        return _PyVMAP.sElementType_getDimension(self)

    def setDimension(self, value):
        r"""
        void
        VMAP::sElementType::setDimension(int value)

        This function sets element dimension.

        Parameters:
        -----------

        value:  Integer read from VMAP File 
        """
        return _PyVMAP.sElementType_setDimension(self, value)

    def getShapeType(self):
        r"""
        int
        VMAP::sElementType::getShapeType() const

        This function gets element shape type.

        content ofmyShapeType 
        """
        return _PyVMAP.sElementType_getShapeType(self)

    def setShapeType(self, value):
        r"""
        void
        VMAP::sElementType::setShapeType(int value)

        This function sets element.

        Parameters:
        -----------

        value:  Integer read from VMAP File 
        """
        return _PyVMAP.sElementType_setShapeType(self, value)

    def getInterpolationType(self):
        r"""
        int
        VMAP::sElementType::getInterpolationType() const

        This function gets element interpolation type identifier from
        structure attribute myInterpolationType.

        content of myInterpolationType 
        """
        return _PyVMAP.sElementType_getInterpolationType(self)

    def setInterpolationType(self, value):
        r"""
        void
        VMAP::sElementType::setInterpolationType(int value)

        This function sets element interpolation type to structure attribute
        myInterpolationType.

        Parameters:
        -----------

        value:  Integer read from VMAP File 
        """
        return _PyVMAP.sElementType_setInterpolationType(self, value)

    def getIntegrationType(self):
        r"""
        int
        VMAP::sElementType::getIntegrationType() const

        This function gets element integration type identifier from structure
        attribute myIntegrationType.

        content of myIntegrationType 
        """
        return _PyVMAP.sElementType_getIntegrationType(self)

    def setIntegrationType(self, value):
        r"""
        void
        VMAP::sElementType::setIntegrationType(int value)

        This function sets element integration type to structure attribute
        myIntegrationType.

        Parameters:
        -----------

        value:  Integer read from VMAP File 
        """
        return _PyVMAP.sElementType_setIntegrationType(self, value)

    def getNumberOfNormalComponents(self):
        r"""
        int VMAP::sElementType::getNumberOfNormalComponents() const

        This function gets element type number of non-zero tensor normal
        components XX,YY,ZZ.

        content of myNumberOfNormalComponents 
        """
        return _PyVMAP.sElementType_getNumberOfNormalComponents(self)

    def setNumberOfNormalComponents(self, value):
        r"""
        void VMAP::sElementType::setNumberOfNormalComponents(int value)

        his function sets element type number of non-zero tensor normal
        components XX,YY,ZZ.

        T

        Parameters:
        -----------

        value:  Sets the number of normal components 
        """
        return _PyVMAP.sElementType_setNumberOfNormalComponents(self, value)

    def getNumberOfShearComponents(self):
        r"""
        int VMAP::sElementType::getNumberOfShearComponents() const

        This function gets element type number of non-zero tensor shear
        components XY,YZ,XZ.

        content of myNumberOfShearComponentse 
        """
        return _PyVMAP.sElementType_getNumberOfShearComponents(self)

    def setNumberOfShearComponents(self, value):
        r"""
        void VMAP::sElementType::setNumberOfShearComponents(int value)

        This function sets element type number of non-zero tensor shear
        components XY,YZ,XZ.

        Parameters:
        -----------

        value:  Sets the number of shear components 
        """
        return _PyVMAP.sElementType_setNumberOfShearComponents(self, value)

    def getConnectivity(self):
        r"""
        const
        std::vector< int > & VMAP::sElementType::getConnectivity() const

        This function gets connectivity of nodes from structure attribute
        myConnectivity.

        content of myConnectivity 
        """
        return _PyVMAP.sElementType_getConnectivity(self)

    def setConnectivity(self, connectivity):
        r"""
        void
        VMAP::sElementType::setConnectivity(const std::vector< int >
        &connectivity)

        This function sets connectivity of nodes to structure attribute
        myConnectivity.

        Parameters:
        -----------

        connectivity:  Integer vector read from VMAP File 
        """
        return _PyVMAP.sElementType_setConnectivity(self, connectivity)

    def getFaceConnectivity(self):
        r"""
        const
        std::vector< int > & VMAP::sElementType::getFaceConnectivity() const

        This function gets face connectivity from structure attribute
        myFaceConnectivity.

        content of myFaceConnectivity 
        """
        return _PyVMAP.sElementType_getFaceConnectivity(self)

    def setFaceConnectivity(self, connectivity):
        r"""
        void
        VMAP::sElementType::setFaceConnectivity(const std::vector< int >
        &connectivity)

        This function sets face connectivity to structure attribute
        myFaceConnectivity.

        Parameters:
        -----------

        connectivity:  Integer vector read from VMAP File 
        """
        return _PyVMAP.sElementType_setFaceConnectivity(self, connectivity)

    def setHDF5Handles(self):
        r"""
        void
        VMAP::sElementType::setHDF5Handles()

        This function sets the HDF5 handles before writing to VMAP file. 
        """
        return _PyVMAP.sElementType_setHDF5Handles(self)

# Register sElementType in _PyVMAP:
_PyVMAP.sElementType_swigregister(sElementType)

class sElement(object):
    r"""


    sElement structure defines VMAP elements.

    This structure is a helper structure for sElementBlock structure. The
    structure has default constructors & destructor and member functions.
    All the member functions are defined in header file VMAP.h. Some
    member functions are declared inline and others in source code file
    VMAP.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myIdentifier = property(_PyVMAP.sElement_myIdentifier_get, _PyVMAP.sElement_myIdentifier_set)
    myElementType = property(_PyVMAP.sElement_myElementType_get, _PyVMAP.sElement_myElementType_set)
    myCoordinateSystem = property(_PyVMAP.sElement_myCoordinateSystem_get, _PyVMAP.sElement_myCoordinateSystem_set)
    myMaterialType = property(_PyVMAP.sElement_myMaterialType_get, _PyVMAP.sElement_myMaterialType_set)
    mySectionType = property(_PyVMAP.sElement_mySectionType_get, _PyVMAP.sElement_mySectionType_set)
    myConnectivity = property(_PyVMAP.sElement_myConnectivity_get, _PyVMAP.sElement_myConnectivity_set)
    myConnectivityHandle = property(_PyVMAP.sElement_myConnectivityHandle_get, _PyVMAP.sElement_myConnectivityHandle_set)

    def __init__(self, *args):
        r"""
        VMAP::sElement::sElement(const sElement &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sElement_swiginit(self, _PyVMAP.new_sElement(*args))
    __swig_destroy__ = _PyVMAP.delete_sElement

    def getIdentifier(self):
        r"""
        int
        VMAP::sElement::getIdentifier() const

        This function gets the identifier from structure attribute
        myIdentifier.

        content of myIdentifier 
        """
        return _PyVMAP.sElement_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sElement::setIdentifier(int id)

        This function sets the identifier to structure attribute myIdentifier.

        Parameters:
        -----------

        id:  Integer read from VMAP File 
        """
        return _PyVMAP.sElement_setIdentifier(self, id)

    def getElementType(self):
        r"""
        int
        VMAP::sElement::getElementType() const

        This function gets the element type from structure attribute
        myElementType.

        content of myElementType 
        """
        return _PyVMAP.sElement_getElementType(self)

    def setElementType(self, type):
        r"""
        void
        VMAP::sElement::setElementType(int type)

        This function sets the element type to structure attribute
        myElementType.

        Parameters:
        -----------

        type:  Integer read from VMAP File 
        """
        return _PyVMAP.sElement_setElementType(self, type)

    def getCoordinateSystem(self):
        r"""
        int
        VMAP::sElement::getCoordinateSystem() const

        This function gets the coordinate system from structure attribute
        myCoordinateSystem.

        content of myCoordinateSystem 
        """
        return _PyVMAP.sElement_getCoordinateSystem(self)

    def setCoordinateSystem(self, systemId):
        r"""
        void
        VMAP::sElement::setCoordinateSystem(int systemId)

        This function sets the coordinate system to structure attribute
        myCoordinateSystem.

        Parameters:
        -----------

        systemId:  Integer to store in VMAP File 
        """
        return _PyVMAP.sElement_setCoordinateSystem(self, systemId)

    def getMaterialType(self):
        r"""
        int
        VMAP::sElement::getMaterialType() const

        This function gets the material type from structure attribute
        myMaterialType.

        content of myMaterialType 
        """
        return _PyVMAP.sElement_getMaterialType(self)

    def setMaterialType(self, materialType):
        r"""
        void
        VMAP::sElement::setMaterialType(int materialType)

        This function sets the material type to structure attribute
        myMaterialType.

        Parameters:
        -----------

        materialType:  to store in VMAP File 
        """
        return _PyVMAP.sElement_setMaterialType(self, materialType)

    def getSectionType(self):
        r"""
        int
        VMAP::sElement::getSectionType() const

        This function gets the section type from structure attribute
        mySectionType.

        content of mySectionType 
        """
        return _PyVMAP.sElement_getSectionType(self)

    def setSectionType(self, sectionType):
        r"""
        void
        VMAP::sElement::setSectionType(int sectionType)

        This function sets the section type to structure attribute
        mySectionType.

        Parameters:
        -----------

        sectionType:  to store in VMAP File 
        """
        return _PyVMAP.sElement_setSectionType(self, sectionType)

    def getConnectivity(self):
        r"""
        const
        std::vector< int > & VMAP::sElement::getConnectivity() const

        This function gets the element connectivity from structure attribute
        myConnectivity.

        content of myConnectivity 
        """
        return _PyVMAP.sElement_getConnectivity(self)

    def setConnectivity(self, connectivity):
        r"""
        void
        VMAP::sElement::setConnectivity(const std::vector< int >
        &connectivity)

        This function sets the element connectivity to structure attribute
        myConnectivity.

        Parameters:
        -----------

        connectivity:  Integer vector to store in VMAP File 
        """
        return _PyVMAP.sElement_setConnectivity(self, connectivity)

    def setHDF5Handles(self):
        r"""
        void
        VMAP::sElement::setHDF5Handles()

        This function sets the HDF5 handles before writing to VMAP file. 
        """
        return _PyVMAP.sElement_setHDF5Handles(self)

# Register sElement in _PyVMAP:
_PyVMAP.sElement_swigregister(sElement)

class sElementBlock(object):
    r"""


    sElementBlock structure defines VMAP element block.

    The structure has default constructors & destructor and member
    functions. All the member functions are declared in header file
    VMAP.h. Some member functions are defined inline and others in source
    code file VMAP.cxx.

    The structure is referenced by VMAPFile::writeElementsBlock() &
    VMAPFile::readElementsBlock() functions declared in header file
    VMAPFile.h & defined in source code file VMAPFile.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myElementsSize = property(_PyVMAP.sElementBlock_myElementsSize_get, _PyVMAP.sElementBlock_myElementsSize_set)
    myElements = property(_PyVMAP.sElementBlock_myElements_get, _PyVMAP.sElementBlock_myElements_set)
    myElementsHandle = property(_PyVMAP.sElementBlock_myElementsHandle_get, _PyVMAP.sElementBlock_myElementsHandle_set)

    def __init__(self, *args):
        r"""
        VMAP::sElementBlock::sElementBlock(const sElementBlock &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sElementBlock_swiginit(self, _PyVMAP.new_sElementBlock(*args))
    __swig_destroy__ = _PyVMAP.delete_sElementBlock

    def getElementsSize(self):
        r"""
        unsigned
        long VMAP::sElementBlock::getElementsSize() const

        This function gets the element's size from structure attribute
        myElementsSize.

        content of myElementsSize 
        """
        return _PyVMAP.sElementBlock_getElementsSize(self)

    def getElement(self, index):
        r"""
        sElement
        VMAP::sElementBlock::getElement(unsigned long index)

        This function gets the element's details from structure attribute
        myElements.

        Parameters:
        -----------

        index:  Integer for myElements counter

        sElement struct 
        """
        return _PyVMAP.sElementBlock_getElement(self, index)

    def setElement(self, index, element):
        r"""
        void
        VMAP::sElementBlock::setElement(unsigned long index, const sElement
        &element)

        This function sets the element's details to structure attribute
        myElements.

        Parameters:
        -----------

        index:  Integer read from VMAP File

        element:   sElement type struct read from VMAP File 
        """
        return _PyVMAP.sElementBlock_setElement(self, index, element)

    def setHDF5Handles(self):
        r"""
        void
        VMAP::sElementBlock::setHDF5Handles()

        This function sets the HDF5 handles before writing to VMAP file. 
        """
        return _PyVMAP.sElementBlock_setHDF5Handles(self)

# Register sElementBlock in _PyVMAP:
_PyVMAP.sElementBlock_swigregister(sElementBlock)

class sGeometrySet(object):
    r"""


    Data structure to define a VMAP set based on geometric entities.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NODE_LOCATION = _PyVMAP.sGeometrySet_NODE_LOCATION
    ELEMENT_LOCATION = _PyVMAP.sGeometrySet_ELEMENT_LOCATION
    SINGLE_INDEX_TYPE = _PyVMAP.sGeometrySet_SINGLE_INDEX_TYPE
    PAIR_INDEX_TYPE = _PyVMAP.sGeometrySet_PAIR_INDEX_TYPE
    myIdentifier = property(_PyVMAP.sGeometrySet_myIdentifier_get, _PyVMAP.sGeometrySet_myIdentifier_set)
    mySetName = property(_PyVMAP.sGeometrySet_mySetName_get, _PyVMAP.sGeometrySet_mySetName_set)
    mySetType = property(_PyVMAP.sGeometrySet_mySetType_get, _PyVMAP.sGeometrySet_mySetType_set)
    mySetIndexType = property(_PyVMAP.sGeometrySet_mySetIndexType_get, _PyVMAP.sGeometrySet_mySetIndexType_set)
    myGeometrySetData = property(_PyVMAP.sGeometrySet_myGeometrySetData_get, _PyVMAP.sGeometrySet_myGeometrySetData_set)

    def __init__(self, *args):
        r"""
        VMAP::sGeometrySet::sGeometrySet(const sGeometrySet &other)

        Copy constructor. 
        """
        _PyVMAP.sGeometrySet_swiginit(self, _PyVMAP.new_sGeometrySet(*args))
    __swig_destroy__ = _PyVMAP.delete_sGeometrySet

    def getIdentifier(self):
        r"""
        int
        VMAP::sGeometrySet::getIdentifier() const

        Get geometry set identifier.

        Returns value of myIdentifier 
        """
        return _PyVMAP.sGeometrySet_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sGeometrySet::setIdentifier(int id)

        Set geometry set identifier.

        Parameters:
        -----------

        id:  Sets myIdentifier to new value 
        """
        return _PyVMAP.sGeometrySet_setIdentifier(self, id)

    def getSetName(self):
        r"""
        const char*
        VMAP::sGeometrySet::getSetName() const

        Get the name of the geometry set.

        Returns value of mySetName 
        """
        return _PyVMAP.sGeometrySet_getSetName(self)

    def setSetName(self, s):
        r"""
        void
        VMAP::sGeometrySet::setSetName(const char *s)

        Set the name of the geometry set.

        Parameters:
        -----------

        s:  Sets mySetName to new value 
        """
        return _PyVMAP.sGeometrySet_setSetName(self, s)

    def getSetType(self):
        r"""
        int
        VMAP::sGeometrySet::getSetType() const

        Get the type of the geometry set.

        Returns value of 
        """
        return _PyVMAP.sGeometrySet_getSetType(self)

    def setSetType(self, type):
        r"""
        void
        VMAP::sGeometrySet::setSetType(int type)

        Set the type of the geometry set.

        Parameters:
        -----------

        type:  Sets mySetType to new value 
        """
        return _PyVMAP.sGeometrySet_setSetType(self, type)

    def getSetIndexType(self):
        r"""
        int
        VMAP::sGeometrySet::getSetIndexType() const

        Get the index type of the geometry set.

        Returns value of mySetIndexType 
        """
        return _PyVMAP.sGeometrySet_getSetIndexType(self)

    def setSetIndexType(self, type):
        r"""
        void
        VMAP::sGeometrySet::setSetIndexType(int type)

        Set the index type of the geometry set.

        Parameters:
        -----------

        type:  Sets mySetIndexType to new value 
        """
        return _PyVMAP.sGeometrySet_setSetIndexType(self, type)

    def getGeometrySetData(self):
        r"""
        const
        std::vector<int>& VMAP::sGeometrySet::getGeometrySetData() const

        Get the content of the set data.

        Returns value of myGeometrySetData 
        """
        return _PyVMAP.sGeometrySet_getGeometrySetData(self)

    def setGeometrySetData(self, data):
        r"""
        void
        VMAP::sGeometrySet::setGeometrySetData(const std::vector< int > &data)

        Set the content of the set data.

        Parameters:
        -----------

        data:  Sets the content of myGeometrySetData 
        """
        return _PyVMAP.sGeometrySet_setGeometrySetData(self, data)

# Register sGeometrySet in _PyVMAP:
_PyVMAP.sGeometrySet_swigregister(sGeometrySet)

class sStateVariable(object):
    r"""


    sStateVariable structure defines VMAP state variable.

    The structure has default constructors & destructor and member
    functions. All the member functions are declared in header file
    VMAP.h. Some member functions are defined inline and others in source
    code file VMAP.cxx.

    The structure is referenced by VMAPFile::writeVariablesBlock() &
    VMAPFile::readVariablesBlock() functions declared in header file
    VMAPFile.h & defined in source code file VMAPFile.cxx.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DIMENSION_INVALID = _PyVMAP.sStateVariable_DIMENSION_INVALID
    DIMENSION_SCALAR = _PyVMAP.sStateVariable_DIMENSION_SCALAR
    DIMENSION_VECTOR = _PyVMAP.sStateVariable_DIMENSION_VECTOR
    DIMENSION_2ND_ORDER_PLAIN_TENSOR_SYMMETRIC = _PyVMAP.sStateVariable_DIMENSION_2ND_ORDER_PLAIN_TENSOR_SYMMETRIC
    DIMENSION_2ND_ORDER_TENSOR_SYMMETRIC = _PyVMAP.sStateVariable_DIMENSION_2ND_ORDER_TENSOR_SYMMETRIC
    DIMENSION_2ND_ORDER_TENSOR = _PyVMAP.sStateVariable_DIMENSION_2ND_ORDER_TENSOR
    DIMENSION_STIFFNESS_MATRIX = _PyVMAP.sStateVariable_DIMENSION_STIFFNESS_MATRIX
    DIMENSION_4TH_ORDER_TENSOR_SYMMETRIC = _PyVMAP.sStateVariable_DIMENSION_4TH_ORDER_TENSOR_SYMMETRIC
    DIMENSION_4TH_ORDER_TENSOR = _PyVMAP.sStateVariable_DIMENSION_4TH_ORDER_TENSOR
    LOCATION_INVALID = _PyVMAP.sStateVariable_LOCATION_INVALID
    LOCATION_GLOBAL = _PyVMAP.sStateVariable_LOCATION_GLOBAL
    LOCATION_NODE = _PyVMAP.sStateVariable_LOCATION_NODE
    LOCATION_ELEMENT = _PyVMAP.sStateVariable_LOCATION_ELEMENT
    LOCATION_INTEGRATION_POINT = _PyVMAP.sStateVariable_LOCATION_INTEGRATION_POINT
    LOCATION_ELEMENT_FACE = _PyVMAP.sStateVariable_LOCATION_ELEMENT_FACE
    LOCATION_ELEMENT_NODE = _PyVMAP.sStateVariable_LOCATION_ELEMENT_NODE
    ENTITY_REAL = _PyVMAP.sStateVariable_ENTITY_REAL
    ENTITY_COMPLEX = _PyVMAP.sStateVariable_ENTITY_COMPLEX
    ENTITY_HAMILTONIAN = _PyVMAP.sStateVariable_ENTITY_HAMILTONIAN
    myIdentifier = property(_PyVMAP.sStateVariable_myIdentifier_get, _PyVMAP.sStateVariable_myIdentifier_set)
    myVariableName = property(_PyVMAP.sStateVariable_myVariableName_get, _PyVMAP.sStateVariable_myVariableName_set)
    myVariableDescription = property(_PyVMAP.sStateVariable_myVariableDescription_get, _PyVMAP.sStateVariable_myVariableDescription_set)
    myVariableDependency = property(_PyVMAP.sStateVariable_myVariableDependency_get, _PyVMAP.sStateVariable_myVariableDependency_set)
    myIncrementValue = property(_PyVMAP.sStateVariable_myIncrementValue_get, _PyVMAP.sStateVariable_myIncrementValue_set)
    myTimeValue = property(_PyVMAP.sStateVariable_myTimeValue_get, _PyVMAP.sStateVariable_myTimeValue_set)
    myUnit = property(_PyVMAP.sStateVariable_myUnit_get, _PyVMAP.sStateVariable_myUnit_set)
    myCoordinateSystem = property(_PyVMAP.sStateVariable_myCoordinateSystem_get, _PyVMAP.sStateVariable_myCoordinateSystem_set)
    myDimension = property(_PyVMAP.sStateVariable_myDimension_get, _PyVMAP.sStateVariable_myDimension_set)
    myLocation = property(_PyVMAP.sStateVariable_myLocation_get, _PyVMAP.sStateVariable_myLocation_set)
    myMultiplicity = property(_PyVMAP.sStateVariable_myMultiplicity_get, _PyVMAP.sStateVariable_myMultiplicity_set)
    myEntity = property(_PyVMAP.sStateVariable_myEntity_get, _PyVMAP.sStateVariable_myEntity_set)
    myValues = property(_PyVMAP.sStateVariable_myValues_get, _PyVMAP.sStateVariable_myValues_set)
    myIntegrationTypes = property(_PyVMAP.sStateVariable_myIntegrationTypes_get, _PyVMAP.sStateVariable_myIntegrationTypes_set)
    myGeometryIds = property(_PyVMAP.sStateVariable_myGeometryIds_get, _PyVMAP.sStateVariable_myGeometryIds_set)
    __swig_destroy__ = _PyVMAP.delete_sStateVariable

    def __init__(self, *args):
        r"""
        VMAP::sStateVariable::sStateVariable(const sStateVariable &other)

        This constructor copies the content of other structure to the current
        structure.

        Parameters:
        -----------

        other:  Data structure read from VMAP File 
        """
        _PyVMAP.sStateVariable_swiginit(self, _PyVMAP.new_sStateVariable(*args))

    def getIdentifier(self):
        r"""
        int
        VMAP::sStateVariable::getIdentifier() const

        This function gets the identifier from structure attribute
        myIdentifier.

        content of myIdentifier 
        """
        return _PyVMAP.sStateVariable_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sStateVariable::setIdentifier(int id)

        This function sets the identifier to structure attribute myIdentifier.

        Parameters:
        -----------

        id:  Integer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setIdentifier(self, id)

    def getVariableName(self):
        r"""
        const
        char* VMAP::sStateVariable::getVariableName() const

        This function gets the variable name from structure attribute
        myVariableName.

        content of myVariableName 
        """
        return _PyVMAP.sStateVariable_getVariableName(self)

    def setVariableName(self, s):
        r"""
        void
        VMAP::sStateVariable::setVariableName(const char *s)

        This function sets the variable name to structure attribute
        myVariableName.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setVariableName(self, s)

    def getVariableDescription(self):
        r"""
        const char* VMAP::sStateVariable::getVariableDescription() const

        This function gets the variable description from structure attribute
        myVariableDescription.

        content of myVariableDescription 
        """
        return _PyVMAP.sStateVariable_getVariableDescription(self)

    def setVariableDescription(self, s):
        r"""
        void VMAP::sStateVariable::setVariableDescription(const char *s)

        This function sets the variable description to structure attribute
        myVariableDescription.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setVariableDescription(self, s)

    def getVariableDependency(self):
        r"""
        const char* VMAP::sStateVariable::getVariableDependency() const

        This function gets the variable dependency from structure attribute
        myVariableDependency.

        content of myVariableDependency 
        """
        return _PyVMAP.sStateVariable_getVariableDependency(self)

    def setVariableDependency(self, s):
        r"""
        void VMAP::sStateVariable::setVariableDependency(const char *s)

        This function sets the variable dependency to structure attribute
        myVariableDependency.

        Parameters:
        -----------

        s:  Character pointer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setVariableDependency(self, s)

    def getIncrementValue(self):
        r"""
        int
        VMAP::sStateVariable::getIncrementValue() const

        This function gets the increment value from structure attribute
        myIncrementValue.

        content of myIncrementValue 
        """
        return _PyVMAP.sStateVariable_getIncrementValue(self)

    def setIncrementValue(self, inc):
        r"""
        void
        VMAP::sStateVariable::setIncrementValue(int inc)

        This function sets the increment value to structure attribute
        myIncrementValue.

        Parameters:
        -----------

        inc:  Integer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setIncrementValue(self, inc)

    def getTimeValue(self):
        r"""
        double
        VMAP::sStateVariable::getTimeValue() const

        This function gets the time value from structure attribute
        myTimeValue.

        content of myTimeValue 
        """
        return _PyVMAP.sStateVariable_getTimeValue(self)

    def setTimeValue(self, t):
        r"""
        void
        VMAP::sStateVariable::setTimeValue(double t)

        This function sets the time value to structure attribute myTimeValue.

        Parameters:
        -----------

        t:  Double float read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setTimeValue(self, t)

    def getUnit(self):
        r"""
        int
        VMAP::sStateVariable::getUnit() const

        This function gets the unit identifier from structure attribute
        myUnit.

        content of myUnit 
        """
        return _PyVMAP.sStateVariable_getUnit(self)

    def setUnit(self, unit):
        r"""
        void
        VMAP::sStateVariable::setUnit(int unit)

        This function sets the unit identifier to structure attribute myUnit.

        Parameters:
        -----------

        unit:  Integer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setUnit(self, unit)

    def getCoordinateSystem(self):
        r"""
        int
        VMAP::sStateVariable::getCoordinateSystem() const

        This function gets the coordinate system identifier from structure
        attribute myCoordinateSystem.

        content of myCoordinateSystem 
        """
        return _PyVMAP.sStateVariable_getCoordinateSystem(self)

    def setCoordinateSystem(self, csid):
        r"""
        void VMAP::sStateVariable::setCoordinateSystem(int csid)

        This function sets the coordinate system identifier to structure
        attribute myCoordinateSystem.

        Parameters:
        -----------

        csid:  Integer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setCoordinateSystem(self, csid)

    def getDimension(self):
        r"""
        int
        VMAP::sStateVariable::getDimension() const

        This function gets the dimension type from structure attribute
        myDimension.

        content of myDimension 
        """
        return _PyVMAP.sStateVariable_getDimension(self)

    def setDimension(self, dim):
        r"""
        void
        VMAP::sStateVariable::setDimension(int dim)

        This function sets the dimension type to structure attribute
        myDimension.

        Parameters:
        -----------

        dim:  Integer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setDimension(self, dim)

    def getLocation(self):
        r"""
        int
        VMAP::sStateVariable::getLocation() const

        This function gets the location from structure attribute myLocation.

        content of myLocation 
        """
        return _PyVMAP.sStateVariable_getLocation(self)

    def setLocation(self, loc):
        r"""
        void
        VMAP::sStateVariable::setLocation(int loc)

        This function sets the loation to structure attribute myLocation.

        Parameters:
        -----------

        loc:  Integer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setLocation(self, loc)

    def getMultiplicity(self):
        r"""
        int
        VMAP::sStateVariable::getMultiplicity() const

        This function gets the multiplicity from structure attribute
        myMultiplicity.

        content of myMultiplicity 
        """
        return _PyVMAP.sStateVariable_getMultiplicity(self)

    def setMultiplicity(self, mult):
        r"""
        void
        VMAP::sStateVariable::setMultiplicity(int mult)

        This function sets the multiplicity to structure attribute
        myMultiplicity.

        Parameters:
        -----------

        mult:  Integer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setMultiplicity(self, mult)

    def getEntity(self):
        r"""
        int
        VMAP::sStateVariable::getEntity() const

        This function gets the data entity type from structure attribute
        myEntity.

        content of myEntity 
        """
        return _PyVMAP.sStateVariable_getEntity(self)

    def setEntity(self, entity):
        r"""
        void
        VMAP::sStateVariable::setEntity(int entity)

        This function sets the data entity type to structure attribute
        myEntity.

        Parameters:
        -----------

        entity:  Integer read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setEntity(self, entity)

    def getValues(self):
        r"""
        const
        std::vector<double>& VMAP::sStateVariable::getValues() const

        This function gets the data values from structure attribute myValues.

        content of myValues 
        """
        return _PyVMAP.sStateVariable_getValues(self)

    def setValues(self, values):
        r"""
        void
        VMAP::sStateVariable::setValues(const std::vector< double > &values)

        This function sets the data values type to structure attribute
        myValues.

        Parameters:
        -----------

        values:  Double vector read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setValues(self, values)

    def getIntegrationTypes(self):
        r"""
        const std::vector<int>& VMAP::sStateVariable::getIntegrationTypes()
        const

        This function gets the integration type from structure attribute
        myIntegrationTypes.

        content of myIntegrationTypes 
        """
        return _PyVMAP.sStateVariable_getIntegrationTypes(self)

    def setIntegrationTypes(self, types):
        r"""
        void VMAP::sStateVariable::setIntegrationTypes(const std::vector< int
        > &types)

        This function sets the integration type to structure attribute
        myIntegrationTypes.

        Parameters:
        -----------

        types:  Integer vector read from VMAP File 
        """
        return _PyVMAP.sStateVariable_setIntegrationTypes(self, types)

    def getGeometryIds(self):
        r"""
        const
        std::vector<int>& VMAP::sStateVariable::getGeometryIds() const

        This function gets the sGeometrySet ids on which data is defined.

        content of myGeometrySetIds 
        """
        return _PyVMAP.sStateVariable_getGeometryIds(self)

    def setGeometryIds(self, setIds):
        r"""
        void
        VMAP::sStateVariable::setGeometryIds(const std::vector< int > &setIds)

        This function sets the sGeometrySet ids on which data is defined.

        Parameters:
        -----------

        setIds:  Integer vector of sGeometrySet 
        """
        return _PyVMAP.sStateVariable_setGeometryIds(self, setIds)

# Register sStateVariable in _PyVMAP:
_PyVMAP.sStateVariable_swigregister(sStateVariable)

class sTable(object):
    r"""


    Structure to define two-dimensional tables in VMAP.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myIdentifier = property(_PyVMAP.sTable_myIdentifier_get, _PyVMAP.sTable_myIdentifier_set)
    myTableName = property(_PyVMAP.sTable_myTableName_get, _PyVMAP.sTable_myTableName_set)
    myNumberOfRows = property(_PyVMAP.sTable_myNumberOfRows_get, _PyVMAP.sTable_myNumberOfRows_set)
    myNumberOfColumns = property(_PyVMAP.sTable_myNumberOfColumns_get, _PyVMAP.sTable_myNumberOfColumns_set)
    myColumnNames = property(_PyVMAP.sTable_myColumnNames_get, _PyVMAP.sTable_myColumnNames_set)
    myValues = property(_PyVMAP.sTable_myValues_get, _PyVMAP.sTable_myValues_set)
    __swig_destroy__ = _PyVMAP.delete_sTable

    def __init__(self, *args):
        r"""
        VMAP::sTable::sTable(const sTable &other)

        Copy Constructor. 
        """
        _PyVMAP.sTable_swiginit(self, _PyVMAP.new_sTable(*args))

    def getIdentifier(self):
        r"""
        int
        VMAP::sTable::getIdentifier() const

        This function gets the identifier from structure attribute
        myIdentifier.

        content of myIdentifier 
        """
        return _PyVMAP.sTable_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sTable::setIdentifier(int id)

        This function sets the identifier to structure attribute myIdentifier.

        Parameters:
        -----------

        id:  Integer read from VMAP File 
        """
        return _PyVMAP.sTable_setIdentifier(self, id)

    def getTableName(self):
        r"""
        const char*
        VMAP::sTable::getTableName() const

        This function gets the table name from structure attribute
        myTableName.

        content of myTableName 
        """
        return _PyVMAP.sTable_getTableName(self)

    def setTableName(self, s):
        r"""
        void
        VMAP::sTable::setTableName(const char *s)

        This function sets the table name to structure attribute
        myVariableName.

        Parameters:
        -----------

        s:  Name of the table to store in myTableName 
        """
        return _PyVMAP.sTable_setTableName(self, s)

    def getNumberOfRows(self):
        r"""
        int
        VMAP::sTable::getNumberOfRows() const

        This function gets the number of rows from structure attribute
        myNumberOfRows.

        content of myNumberOfRows 
        """
        return _PyVMAP.sTable_getNumberOfRows(self)

    def setNumberOfRows(self, nRows):
        r"""
        void
        VMAP::sTable::setNumberOfRows(int nRows)

        This function sets the number of rows from structure attribute
        myNumberOfRows.

        Parameters:
        -----------

        nRows:  Set the number of rows of the table 
        """
        return _PyVMAP.sTable_setNumberOfRows(self, nRows)

    def getNumberOfColumns(self):
        r"""
        int
        VMAP::sTable::getNumberOfColumns() const

        This function gets the number of columns from structure attribute
        myNumberOfColumns.

        content of myNumberOfColumns 
        """
        return _PyVMAP.sTable_getNumberOfColumns(self)

    def setNumberOfColumns(self, nCols):
        r"""
        void
        VMAP::sTable::setNumberOfColumns(int nCols)

        This function sets the number of columns from structure attribute
        myNumberOfColumns.

        Parameters:
        -----------

        nCols:  Set the number of rows of the table 
        """
        return _PyVMAP.sTable_setNumberOfColumns(self, nCols)

    def getColumnNames(self):
        r"""
        std::vector<std::string> VMAP::sTable::getColumnNames() const

        This function gets the names of table columns.

        content of myColumnNames 
        """
        return _PyVMAP.sTable_getColumnNames(self)

    def setColumnNames(self, colNames):
        r"""
        void
        VMAP::sTable::setColumnNames(const std::vector< std::string >
        &colNames)

        This function sets the names of table columns.

        Parameters:
        -----------

        colNames:  Set the content myColumnNames 
        """
        return _PyVMAP.sTable_setColumnNames(self, colNames)

    def getValues(self):
        r"""
        std::vector<double>
        VMAP::sTable::getValues() const

        This function gets the table values.

        content of myValues 
        """
        return _PyVMAP.sTable_getValues(self)

    def setValues(self, values):
        r"""
        void
        VMAP::sTable::setValues(const std::vector< double > &values)

        This function sets the table values.

        Parameters:
        -----------

        values:  Set the content of myValues 
        """
        return _PyVMAP.sTable_setValues(self, values)

# Register sTable in _PyVMAP:
_PyVMAP.sTable_swigregister(sTable)

class sParameter(object):
    r"""


    Structure to define parameters used in material card.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myName = property(_PyVMAP.sParameter_myName_get, _PyVMAP.sParameter_myName_set)
    myDescription = property(_PyVMAP.sParameter_myDescription_get, _PyVMAP.sParameter_myDescription_set)
    myValue = property(_PyVMAP.sParameter_myValue_get, _PyVMAP.sParameter_myValue_set)
    __swig_destroy__ = _PyVMAP.delete_sParameter

    def __init__(self, *args):
        r"""
        VMAP::sParameter::sParameter(const sParameter &other)

        Copy Constructor. 
        """
        _PyVMAP.sParameter_swiginit(self, _PyVMAP.new_sParameter(*args))

    def getName(self):
        r"""
        const char*
        VMAP::sParameter::getName() const

        Get the name of the parameter.

        content of myName 
        """
        return _PyVMAP.sParameter_getName(self)

    def setName(self, s):
        r"""
        void
        VMAP::sParameter::setName(const char *s)

        Set the name of the parameter.

        Parameters:
        -----------

        s:  Name to store in myName 
        """
        return _PyVMAP.sParameter_setName(self, s)

    def getDescription(self):
        r"""
        const char*
        VMAP::sParameter::getDescription() const

        Get the description of the parameter.

        content of myDescription 
        """
        return _PyVMAP.sParameter_getDescription(self)

    def setDescription(self, s):
        r"""
        void
        VMAP::sParameter::setDescription(const char *s)

        Set the description of the parameter.

        Parameters:
        -----------

        s:  Description to store in myDescription 
        """
        return _PyVMAP.sParameter_setDescription(self, s)

    def getValue(self):
        r"""
        const char*
        VMAP::sParameter::getValue() const

        Get the value of the parameter.

        content of myValue 
        """
        return _PyVMAP.sParameter_getValue(self)

    def setValue(self, s):
        r"""
        void
        VMAP::sParameter::setValue(const char *s)

        Set the value of the parameter.

        Parameters:
        -----------

        s:  Value to store in myValue 
        """
        return _PyVMAP.sParameter_setValue(self, s)

# Register sParameter in _PyVMAP:
_PyVMAP.sParameter_swigregister(sParameter)

class sMaterialCard(object):
    r"""


    Structure to define a material card.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myModelName = property(_PyVMAP.sMaterialCard_myModelName_get, _PyVMAP.sMaterialCard_myModelName_set)
    myIdentifier = property(_PyVMAP.sMaterialCard_myIdentifier_get, _PyVMAP.sMaterialCard_myIdentifier_set)
    myPhysics = property(_PyVMAP.sMaterialCard_myPhysics_get, _PyVMAP.sMaterialCard_myPhysics_set)
    mySolver = property(_PyVMAP.sMaterialCard_mySolver_get, _PyVMAP.sMaterialCard_mySolver_set)
    mySolverVersion = property(_PyVMAP.sMaterialCard_mySolverVersion_get, _PyVMAP.sMaterialCard_mySolverVersion_set)
    mySolution = property(_PyVMAP.sMaterialCard_mySolution_get, _PyVMAP.sMaterialCard_mySolution_set)
    myUnitSystem = property(_PyVMAP.sMaterialCard_myUnitSystem_get, _PyVMAP.sMaterialCard_myUnitSystem_set)
    myIdealization = property(_PyVMAP.sMaterialCard_myIdealization_get, _PyVMAP.sMaterialCard_myIdealization_set)
    myParameters = property(_PyVMAP.sMaterialCard_myParameters_get, _PyVMAP.sMaterialCard_myParameters_set)
    myTables = property(_PyVMAP.sMaterialCard_myTables_get, _PyVMAP.sMaterialCard_myTables_set)
    __swig_destroy__ = _PyVMAP.delete_sMaterialCard

    def __init__(self, *args):
        r"""
        VMAP::sMaterialCard::sMaterialCard(const sMaterialCard &other)

        Copy Constructor. 
        """
        _PyVMAP.sMaterialCard_swiginit(self, _PyVMAP.new_sMaterialCard(*args))

    def getModelName(self):
        r"""
        const char*
        VMAP::sMaterialCard::getModelName() const

        Get the model name.

        content of myModelName 
        """
        return _PyVMAP.sMaterialCard_getModelName(self)

    def setModelName(self, s):
        r"""
        void
        VMAP::sMaterialCard::setModelName(const char *s)

        Set the model name.

        Parameters:
        -----------

        s:  Name of the model to store in myModelName 
        """
        return _PyVMAP.sMaterialCard_setModelName(self, s)

    def getIdentifier(self):
        r"""
        const
        char* VMAP::sMaterialCard::getIdentifier() const

        Get the identifier of the material card.

        content of myIdentifier 
        """
        return _PyVMAP.sMaterialCard_getIdentifier(self)

    def setIdentifier(self, s):
        r"""
        void
        VMAP::sMaterialCard::setIdentifier(const char *s)

        Set the identifier of the material card.

        Parameters:
        -----------

        s:  Identifier of the material card to store in myIdentifier 
        """
        return _PyVMAP.sMaterialCard_setIdentifier(self, s)

    def getPhysics(self):
        r"""
        const char*
        VMAP::sMaterialCard::getPhysics() const

        Get the physics of the material card.

        content of myPhysics 
        """
        return _PyVMAP.sMaterialCard_getPhysics(self)

    def setPhysics(self, s):
        r"""
        void
        VMAP::sMaterialCard::setPhysics(const char *s)

        Set the physics of the material card.

        Parameters:
        -----------

        s:  Physics of the material card to store in myPhysics 
        """
        return _PyVMAP.sMaterialCard_setPhysics(self, s)

    def getSolver(self):
        r"""
        const char*
        VMAP::sMaterialCard::getSolver() const

        Get the solver of the material card.

        content of mySolver 
        """
        return _PyVMAP.sMaterialCard_getSolver(self)

    def setSolver(self, s):
        r"""
        void
        VMAP::sMaterialCard::setSolver(const char *s)

        Set the solver of the material card.

        Parameters:
        -----------

        s:  Solver of the material card to store in mySolver 
        """
        return _PyVMAP.sMaterialCard_setSolver(self, s)

    def getSolverVersion(self):
        r"""
        const
        char* VMAP::sMaterialCard::getSolverVersion() const

        Get the solver version of the material card.

        content of mySolverVersion 
        """
        return _PyVMAP.sMaterialCard_getSolverVersion(self)

    def setSolverVersion(self, s):
        r"""
        void
        VMAP::sMaterialCard::setSolverVersion(const char *s)

        Set the solver version of the material card.

        Parameters:
        -----------

        s:  Solver version of the material card to store in mySolverVersion 
        """
        return _PyVMAP.sMaterialCard_setSolverVersion(self, s)

    def getSolution(self):
        r"""
        const char*
        VMAP::sMaterialCard::getSolution() const

        Get the solution of the material card.

        content of mySolution 
        """
        return _PyVMAP.sMaterialCard_getSolution(self)

    def setSolution(self, s):
        r"""
        void
        VMAP::sMaterialCard::setSolution(const char *s)

        Set the solution of the material card.

        Parameters:
        -----------

        s:  Solution of the material card to store in mySolution 
        """
        return _PyVMAP.sMaterialCard_setSolution(self, s)

    def getUnitSystem(self):
        r"""
        const
        char* VMAP::sMaterialCard::getUnitSystem() const

        Get the unit system of the material card.

        content of myUnitSystem 
        """
        return _PyVMAP.sMaterialCard_getUnitSystem(self)

    def setUnitSystem(self, s):
        r"""
        void
        VMAP::sMaterialCard::setUnitSystem(const char *s)

        Set the unit system of the material card.

        Parameters:
        -----------

        s:  Unit system of the material card to store in myUnitSystem 
        """
        return _PyVMAP.sMaterialCard_setUnitSystem(self, s)

    def getIdealization(self):
        r"""
        const
        char* VMAP::sMaterialCard::getIdealization() const

        Get the idealization of the material card.

        content of myIdealization 
        """
        return _PyVMAP.sMaterialCard_getIdealization(self)

    def setIdealization(self, s):
        r"""
        void
        VMAP::sMaterialCard::setIdealization(const char *s)

        Set the idealization of the material card.

        Parameters:
        -----------

        s:  Idealization of the material card to store in myIdealization 
        """
        return _PyVMAP.sMaterialCard_setIdealization(self, s)

    def getParameters(self):
        r"""
        const
        std::vector<sParameter>& VMAP::sMaterialCard::getParameters() const

        Get the parameter of the material card.

        content of myParameters 
        """
        return _PyVMAP.sMaterialCard_getParameters(self)

    def setParameters(self, params):
        r"""
        void
        VMAP::sMaterialCard::setParameters(const std::vector< sParameter >
        &params)

        Set the parameter of the material card.

        Parameters:
        -----------

        params:  Parameters of the material card to store in myParameters 
        """
        return _PyVMAP.sMaterialCard_setParameters(self, params)

    def getTables(self):
        r"""
        const
        std::vector<sTable>& VMAP::sMaterialCard::getTables() const

        Get the tables of the material card.

        content of myTables 
        """
        return _PyVMAP.sMaterialCard_getTables(self)

    def setTables(self, tables):
        r"""
        void
        VMAP::sMaterialCard::setTables(const std::vector< sTable > &tables)

        Set the tables of the material card.

        Parameters:
        -----------

        tables:  Tables of the material card to store in myTables 
        """
        return _PyVMAP.sMaterialCard_setTables(self, tables)

# Register sMaterialCard in _PyVMAP:
_PyVMAP.sMaterialCard_swigregister(sMaterialCard)

class sMaterial(object):
    r"""


    Structure to define materials in VMAP.

    C++ includes: VMAP.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    myIdentifier = property(_PyVMAP.sMaterial_myIdentifier_get, _PyVMAP.sMaterial_myIdentifier_set)
    myMaterialName = property(_PyVMAP.sMaterial_myMaterialName_get, _PyVMAP.sMaterial_myMaterialName_set)
    myMaterialDescription = property(_PyVMAP.sMaterial_myMaterialDescription_get, _PyVMAP.sMaterial_myMaterialDescription_set)
    myMaterialSupplier = property(_PyVMAP.sMaterial_myMaterialSupplier_get, _PyVMAP.sMaterial_myMaterialSupplier_set)
    myMaterialType = property(_PyVMAP.sMaterial_myMaterialType_get, _PyVMAP.sMaterial_myMaterialType_set)
    myMaterialState = property(_PyVMAP.sMaterial_myMaterialState_get, _PyVMAP.sMaterial_myMaterialState_set)
    myMaterialCard = property(_PyVMAP.sMaterial_myMaterialCard_get, _PyVMAP.sMaterial_myMaterialCard_set)
    __swig_destroy__ = _PyVMAP.delete_sMaterial

    def __init__(self, *args):
        r"""
        VMAP::sMaterial::sMaterial(const sMaterial &other)

        Copy Constructor. 
        """
        _PyVMAP.sMaterial_swiginit(self, _PyVMAP.new_sMaterial(*args))

    def getIdentifier(self):
        r"""
        int
        VMAP::sMaterial::getIdentifier() const

        This function gets the identifier from structure attribute
        myIdentifier.

        content of myIdentifier 
        """
        return _PyVMAP.sMaterial_getIdentifier(self)

    def setIdentifier(self, id):
        r"""
        void
        VMAP::sMaterial::setIdentifier(int id)

        This function sets the identifier to structure attribute myIdentifier.

        Parameters:
        -----------

        id:  Integer to store in myIdentifier 
        """
        return _PyVMAP.sMaterial_setIdentifier(self, id)

    def getMaterialName(self):
        r"""
        const char*
        VMAP::sMaterial::getMaterialName() const

        Get the name of the material.

        content of myMaterialName 
        """
        return _PyVMAP.sMaterial_getMaterialName(self)

    def setMaterialName(self, s):
        r"""
        void
        VMAP::sMaterial::setMaterialName(const char *s)

        Set the name of the material.

        Parameters:
        -----------

        s:  Name of the material to store in myMaterialName 
        """
        return _PyVMAP.sMaterial_setMaterialName(self, s)

    def getMaterialDescription(self):
        r"""
        const
        char* VMAP::sMaterial::getMaterialDescription() const

        Get the description of the material.

        content of myMaterialDescription 
        """
        return _PyVMAP.sMaterial_getMaterialDescription(self)

    def setMaterialDescription(self, s):
        r"""
        void
        VMAP::sMaterial::setMaterialDescription(const char *s)

        Set the description of the material.

        Parameters:
        -----------

        s:  Description of the material to store in myMaterialDescription 
        """
        return _PyVMAP.sMaterial_setMaterialDescription(self, s)

    def getMaterialSupplier(self):
        r"""
        const
        char* VMAP::sMaterial::getMaterialSupplier() const

        Get the supplier of the material.

        content of myMaterialSupplier 
        """
        return _PyVMAP.sMaterial_getMaterialSupplier(self)

    def setMaterialSupplier(self, s):
        r"""
        void
        VMAP::sMaterial::setMaterialSupplier(const char *s)

        Set the supplier of the material.

        Parameters:
        -----------

        s:  Supplier of the material to store in myMaterialSupplier 
        """
        return _PyVMAP.sMaterial_setMaterialSupplier(self, s)

    def getMaterialType(self):
        r"""
        const char*
        VMAP::sMaterial::getMaterialType() const

        Get the type of the material.

        content of myMaterialType 
        """
        return _PyVMAP.sMaterial_getMaterialType(self)

    def setMaterialType(self, s):
        r"""
        void
        VMAP::sMaterial::setMaterialType(const char *s)

        Set the tpye of the material.

        Parameters:
        -----------

        s:  Type of the material to store in myMaterialType 
        """
        return _PyVMAP.sMaterial_setMaterialType(self, s)

    def getMaterialState(self):
        r"""
        const char*
        VMAP::sMaterial::getMaterialState() const

        Get the state of the material.

        content of myMaterialState 
        """
        return _PyVMAP.sMaterial_getMaterialState(self)

    def setMaterialState(self, s):
        r"""
        void
        VMAP::sMaterial::setMaterialState(const char *s)

        Set the state of the material.

        Parameters:
        -----------

        s:  State of the material to store in myMaterialState 
        """
        return _PyVMAP.sMaterial_setMaterialState(self, s)

    def getMaterialCard(self):
        r"""
        const
        sMaterialCard& VMAP::sMaterial::getMaterialCard() const

        Get the material card of the material.

        content of myMaterialCard 
        """
        return _PyVMAP.sMaterial_getMaterialCard(self)

    def setMaterialCard(self, mc):
        r"""
        void
        VMAP::sMaterial::setMaterialCard(const sMaterialCard &mc)

        Set the material card of the material.

        Parameters:
        -----------

        mc:  Material card of the material to store inmyMaterialCard 
        """
        return _PyVMAP.sMaterial_setMaterialCard(self, mc)

# Register sMaterial in _PyVMAP:
_PyVMAP.sMaterial_swigregister(sMaterial)


def Initialize():
    r"""
    void VMAP_DECLSPEC
    VMAP::Initialize()

    Method to initialize the VMAP HDF5 data classes.

    Initialization of basic 1D array sizes

    Initialization of integer arrays

    Initialization of double arrays 
    """
    return _PyVMAP.Initialize()
class VMAPFile(object):
    r"""


    Class to read / write a VMAP HDF5 file.

    C++ includes: VMAPFile.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    CREATEORREPLACE = _PyVMAP.VMAPFile_CREATEORREPLACE
    OPENREADWRITE = _PyVMAP.VMAPFile_OPENREADWRITE
    OPENREADONLY = _PyVMAP.VMAPFile_OPENREADONLY

    def __init__(self, *args):
        r"""
        VMAP::VMAPFile::VMAPFile(const std::string &path, int mode, const
        std::string &prefix)

        Constructor with path and openmode.

        Parameters:
        -----------

        path:  Local path to file location.

        mode:  eFileOpenMode to access the file.

        prefix:  Path prefix. 
        """
        _PyVMAP.VMAPFile_swiginit(self, _PyVMAP.new_VMAPFile(*args))
    __swig_destroy__ = _PyVMAP.delete_VMAPFile

    def openFile(self, *args):
        r"""
        void
        VMAP::VMAPFile::openFile(const std::string &path, int
        mode=CREATEORREPLACE)

        openFile with path and openmode.

        Parameters:
        -----------

        path:  Local path to file location.

        mode:  eFileOpenMode to access the file. 
        """
        return _PyVMAP.VMAPFile_openFile(self, *args)

    @staticmethod
    def getBaseGroups(pathToFile):
        return _PyVMAP.VMAPFile_getBaseGroups(pathToFile)

    def closeFile(self):
        r"""
        void
        VMAP::VMAPFile::closeFile()

        close H5 file manually 
        """
        return _PyVMAP.VMAPFile_closeFile(self)

    def readVersion(self, version):
        r"""
        void
        VMAP::VMAPFile::readVersion(sVersion &version)

        Reads attribute "VERSION" from group "/VMAP/" and stores content
        in sVersion.

        Parameters:
        -----------

        version:  Data structure read from VMAP file. 
        """
        return _PyVMAP.VMAPFile_readVersion(self, version)

    def writeMetaInformation(self, metaInfo):
        r"""
        void
        VMAP::VMAPFile::writeMetaInformation(const sMetaInformation &metaInfo)

        Write sMetaInformation to file; Creates dataset "METADATA" in group
        "/VMAP/SYSTEM".

        Parameters:
        -----------

        metaInfo:  Data structure containing the sMetaInformation 
        """
        return _PyVMAP.VMAPFile_writeMetaInformation(self, metaInfo)

    def readMetaInformation(self, metaInfo):
        r"""
        void
        VMAP::VMAPFile::readMetaInformation(sMetaInformation &metaInfo)

        Reads dataset "METADATA" from group "/VMAP/SYSTEM" and stores
        content in sMetaInformation.

        Parameters:
        -----------

        metaInfo:  Data structure read from VMAP file.

        Old version as attribute; if fails use the dataset approach 
        """
        return _PyVMAP.VMAPFile_readMetaInformation(self, metaInfo)

    def writeUnitSystem(self, unitSystem):
        r"""
        void
        VMAP::VMAPFile::writeUnitSystem(const sUnitSystem &unitSystem)

        Writes sUnitSystem to file; Creates dataset "UNITSYSTEM" in group
        "/VMAP/SYSTEM".

        Parameters:
        -----------

        unitSystem:  Data structure containing the sUnitSystem 
        """
        return _PyVMAP.VMAPFile_writeUnitSystem(self, unitSystem)

    def readUnitSystem(self, unitSystem):
        r"""
        void
        VMAP::VMAPFile::readUnitSystem(sUnitSystem &unitSystem)

        Reads dataset "UNITSYSTEM" from group "/VMAP/SYSTEM" and stores
        content in sUnitSystem.

        Parameters:
        -----------

        unitSystem:  Data structure read from VMAP file.

        Old version as attribute; if fails use the dataset approach 
        """
        return _PyVMAP.VMAPFile_readUnitSystem(self, unitSystem)

    def writeUnits(self, units):
        r"""
        void
        VMAP::VMAPFile::writeUnits(const std::vector< VMAP::sUnit > &units)

        Writes units to file; Creates dataset "UNITS" in group
        "/VMAP/SYSTEM".

        Parameters:
        -----------

        units:  Data structure containing a list of sUnit 
        """
        return _PyVMAP.VMAPFile_writeUnits(self, units)

    def readUnits(self, units):
        r"""
        void
        VMAP::VMAPFile::readUnits(std::vector< VMAP::sUnit > &units)

        Reads dataset "UNITS" from group "/VMAP/SYSTEM".

        Parameters:
        -----------

        units:  Data structure containing a list of sUnit 
        """
        return _PyVMAP.VMAPFile_readUnits(self, units)

    def writeElementTypes(self, types):
        r"""
        void
        VMAP::VMAPFile::writeElementTypes(const std::vector<
        VMAP::sElementType > &types)

        Writes element types as DataSet "ELEMENTTYPES" to group
        "/VMAP/SYSTEM".

        Parameters:
        -----------

        types:  Data structure containing a list of sElementType

        need to initialize handles before writing 
        """
        return _PyVMAP.VMAPFile_writeElementTypes(self, types)

    def readElementTypes(self, types):
        r"""
        void
        VMAP::VMAPFile::readElementTypes(std::vector< VMAP::sElementType >
        &types)

        Reads element types from group "/VMAP/SYSTEM" DataSet
        "ELEMENTTYPES".

        Parameters:
        -----------

        types:  Data structure containing a list of sElementType 
        """
        return _PyVMAP.VMAPFile_readElementTypes(self, types)

    def writeCoordinateSystems(self, groupName, systems):
        r"""
        void
        VMAP::VMAPFile::writeCoordinateSystems(const std::string &groupName,
        const std::vector< VMAP::sCoordinateSystem > &systems)

        Writes coordinate system as DataSet "COORDINATESYSTEM" to group
        "groupName".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information in

        systems:  Data structure containing a list of sCoordinateSystem 
        """
        return _PyVMAP.VMAPFile_writeCoordinateSystems(self, groupName, systems)

    def readCoordinateSystems(self, groupName, systems):
        r"""
        void
        VMAP::VMAPFile::readCoordinateSystems(const std::string &groupName,
        std::vector< VMAP::sCoordinateSystem > &systems)

        Reads coordinate system from group "groupName" DataSet
        "COORDINATESYSTEM".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        systems:  Data structure containing a list of sCoordinateSystem 
        """
        return _PyVMAP.VMAPFile_readCoordinateSystems(self, groupName, systems)

    def writeIntegrationTypes(self, types):
        r"""
        void
        VMAP::VMAPFile::writeIntegrationTypes(const std::vector<
        VMAP::sIntegrationType > &types)

        Writes integration types as DataSet "INTEGRATIONTYPES" to group
        "SYSTEM".

        Parameters:
        -----------

        types:  Data structure containing a list of sIntegrationType

        need to initialize handles before writing 
        """
        return _PyVMAP.VMAPFile_writeIntegrationTypes(self, types)

    def readIntegrationTypes(self, types):
        r"""
        void
        VMAP::VMAPFile::readIntegrationTypes(std::vector<
        VMAP::sIntegrationType > &types)

        Reads integration types from group "SYSTEM" DataSet
        "INTEGRATIONTYPES".

        Parameters:
        -----------

        types:  Data structure containing a list of sIntegrationType 
        """
        return _PyVMAP.VMAPFile_readIntegrationTypes(self, types)

    def writeSections(self, sections):
        r"""
        void
        VMAP::VMAPFile::writeSections(const std::vector< VMAP::sSection >
        &sections)

        Writes section definition as DataSet "SECTION" to group "SYSTEM".

        Parameters:
        -----------

        sections:  Data structure containing a list of sSection 
        """
        return _PyVMAP.VMAPFile_writeSections(self, sections)

    def readSections(self, sections):
        r"""
        void
        VMAP::VMAPFile::readSections(std::vector< VMAP::sSection > &sections)

        Reads section definition from group "SYSTEM" DataSet "SECTION".

        Parameters:
        -----------

        sections:  Data structure containing a list of sIntegrationType 
        """
        return _PyVMAP.VMAPFile_readSections(self, sections)

    def writePointsBlock(self, groupName, points):
        r"""
        void
        VMAP::VMAPFile::writePointsBlock(const std::string &groupName, const
        sPointsBlock &points)

        Writes sPointsBlock to file; Creates DataSet "POINTS" in group
        "groupName".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information in

        points:  Data structure containing a sPointsBlock 
        """
        return _PyVMAP.VMAPFile_writePointsBlock(self, groupName, points)

    def readPointsBlock(self, groupName, points):
        r"""
        void
        VMAP::VMAPFile::readPointsBlock(const std::string &groupName,
        sPointsBlock &points)

        Reads sPointsBlock from group "groupName" DataSet "POINTS".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        points:  Data structure containing a sPointsBlock 
        """
        return _PyVMAP.VMAPFile_readPointsBlock(self, groupName, points)

    def writeElementsBlock(self, groupName, elements):
        r"""
        void
        VMAP::VMAPFile::writeElementsBlock(const std::string &groupName, const
        sElementBlock &elements)

        Writes sElementBlock to file; Creates DataSet "ELEMENTS" in group
        "groupName".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information in

        elements:  Data structure containing a sElementBlock

        need to initialize handles before writing 
        """
        return _PyVMAP.VMAPFile_writeElementsBlock(self, groupName, elements)

    def readElementsBlock(self, groupName, elements):
        r"""
        void
        VMAP::VMAPFile::readElementsBlock(const std::string &groupName,
        sElementBlock &elements)

        Reads sElementBlock from group "groupName" DataSet "ELEMENTS".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        elements:  Data structure containing a sElementBlock 
        """
        return _PyVMAP.VMAPFile_readElementsBlock(self, groupName, elements)

    def writeGeometrySets(self, groupName, sets):
        r"""
        void
        VMAP::VMAPFile::writeGeometrySets(const std::string &groupName, const
        std::vector< sGeometrySet > &sets)

        Writes list of sGeometrySet to file; Creates DataSets in group
        "GEOMETRYSETS".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information in

        sets:  Data structure containing a list of sGeometrySet 
        """
        return _PyVMAP.VMAPFile_writeGeometrySets(self, groupName, sets)

    def readGeometrySets(self, groupName, sets):
        r"""
        void
        VMAP::VMAPFile::readGeometrySets(const std::string &groupName,
        std::vector< sGeometrySet > &sets)

        Reads list of sGeometrySet from file.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        sets:  Data structure containing a list of sGeometrySet 
        """
        return _PyVMAP.VMAPFile_readGeometrySets(self, groupName, sets)

    def writeVariablesBlock(self, groupName, variables):
        r"""
        void
        VMAP::VMAPFile::writeVariablesBlock(const std::string &groupName,
        const std::vector< VMAP::sStateVariable > &variables)

        Writes multiple sStateVariable to file; Creates list of variables in
        group "groupName".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information in

        variables:  Data structure containing a list of sStateVariable 
        """
        return _PyVMAP.VMAPFile_writeVariablesBlock(self, groupName, variables)

    def readVariablesBlock(self, groupName, variables):
        r"""
        void
        VMAP::VMAPFile::readVariablesBlock(const std::string &groupName,
        std::vector< VMAP::sStateVariable > &variables)

        Reads multiple sStateVariable from group "groupName".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        variables:  Data structure containing a list of sStateVariable 
        """
        return _PyVMAP.VMAPFile_readVariablesBlock(self, groupName, variables)

    def writeVariable(self, groupName, variable):
        r"""
        void
        VMAP::VMAPFile::writeVariable(const std::string &groupName, const
        VMAP::sStateVariable &variable)

        Writes single sStateVariable to group "groupName".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        variable:  Data structure of type sStateVariable 
        """
        return _PyVMAP.VMAPFile_writeVariable(self, groupName, variable)

    def readVariable(self, groupName, variable):
        r"""
        void
        VMAP::VMAPFile::readVariable(const std::string &groupName,
        VMAP::sStateVariable &variable)

        Reads single sStateVariable from group "groupName".

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        variable:  Data structure of type sStateVariable 
        """
        return _PyVMAP.VMAPFile_readVariable(self, groupName, variable)

    def writeImage(self, groupName, dataSetName, width, height, rgb):
        r"""
        void
        VMAP::VMAPFile::writeImage(const std::string &groupName, const
        std::string &dataSetName, const int &width, const int &height, const
        std::vector< unsigned char > &rgb)

        Writes a given image to HDF utilizing H5IMmake_image_24bit.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information in

        dataSetName:  Name of the HDF DataSet to create in groupName

        width:  The width of the image to store

        height:  The height of the image to store

        rgb:  Image data as unsigned character vector in RBG format 
        """
        return _PyVMAP.VMAPFile_writeImage(self, groupName, dataSetName, width, height, rgb)

    def readImage(self, groupName, dataSetName, width, height, rgb):
        r"""
        void
        VMAP::VMAPFile::readImage(const std::string &groupName, const
        std::string &dataSetName, int &width, int &height, std::vector<
        unsigned char > &rgb)

        Reads an image from HDF utilizing H5IMread_image.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information from

        dataSetName:  Name of the HDF DataSet to read in groupName

        width:  The width of the image read

        height:  The height of the image read

        rgb:  Image data as unsigned character vector in RBG format 
        """
        return _PyVMAP.VMAPFile_readImage(self, groupName, dataSetName, width, height, rgb)

    def saveExternalFile(self, groupName, dataSetName, fileName):
        r"""
        void
        VMAP::VMAPFile::saveExternalFile(const std::string &groupName, const
        std::string &dataSetName, const std::string &fileName)

        Saves an external file as raw binary to HDF.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information in

        dataSetName:  Name of the HDF DataSet to create in groupName

        fileName:  Local path to external file 
        """
        return _PyVMAP.VMAPFile_saveExternalFile(self, groupName, dataSetName, fileName)

    def restoreExternalFile(self, groupName, dataSetName, fileName):
        r"""
        void
        VMAP::VMAPFile::restoreExternalFile(const std::string &groupName,
        const std::string &dataSetName, const std::string &fileName)

        Restore an external file which was saved in HDF.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information in

        dataSetName:  Name of the HDF DataSet to create in groupName

        fileName:  Local path to external file 
        """
        return _PyVMAP.VMAPFile_restoreExternalFile(self, groupName, dataSetName, fileName)

    def readTable(self, groupName, tableName, table):
        r"""
        void
        VMAP::VMAPFile::readTable(const std::string &groupName, const
        std::string &tableName, sTable &table)

        Read a 2D table from HDF.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        tableName:  Name of the table to read information from

        table:  Table of struct sTable 
        """
        return _PyVMAP.VMAPFile_readTable(self, groupName, tableName, table)

    def writeTable(self, groupName, table):
        r"""
        void
        VMAP::VMAPFile::writeTable(const std::string &groupName, const sTable
        &table)

        Writes a 2D table to HDF.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information in

        table:  Table of struct sTable 
        """
        return _PyVMAP.VMAPFile_writeTable(self, groupName, table)

    def writeMaterialBlock(self, materials):
        r"""
        void
        VMAP::VMAPFile::writeMaterialBlock(const std::vector< sMaterial >
        &materials)

        Writes a vector of VMAP material of type sMaterial.

        Parameters:
        -----------

        materials:  Vector of materials of struct sMaterial 
        """
        return _PyVMAP.VMAPFile_writeMaterialBlock(self, materials)

    def readMaterialBlock(self, materials):
        r"""
        void
        VMAP::VMAPFile::readMaterialBlock(std::vector< sMaterial > &materials)

        Reads a VMAP material of type sMaterial from given group.

        Parameters:
        -----------

        materials:  Vector of materials of struct sMaterial 
        """
        return _PyVMAP.VMAPFile_readMaterialBlock(self, materials)

    def writeMaterial(self, groupName, material):
        r"""
        void
        VMAP::VMAPFile::writeMaterial(const std::string &groupName, const
        sMaterial &material)

        Writes a VMAP material of type sMaterial to given group.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to store information in

        material:  Material of struct sMaterial 
        """
        return _PyVMAP.VMAPFile_writeMaterial(self, groupName, material)

    def readMaterial(self, groupName, material):
        r"""
        void
        VMAP::VMAPFile::readMaterial(const std::string &groupName, sMaterial
        &material)

        Reads a VMAP material of type sMaterial from given group.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        material:  Material of struct sMaterial 
        """
        return _PyVMAP.VMAPFile_readMaterial(self, groupName, material)

    def existsGroup(self, groupName):
        r"""
        bool
        VMAP::VMAPFile::existsGroup(const std::string &groupName)

        Check if group exists in given group.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to test for presents

        true or false 
        """
        return _PyVMAP.VMAPFile_existsGroup(self, groupName)

    def createGroup(self, groupName, trackCreationOrder=False):
        r"""
        void
        VMAP::VMAPFile::createGroup(const std::string &groupName, bool
        trackCreationOrder=false)

        Creates a new group in file.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to create

        trackCreationOrder:  Flag to track the creation order of the group 
        """
        return _PyVMAP.VMAPFile_createGroup(self, groupName, trackCreationOrder)

    def getSubGroups(self, groupName):
        r"""
        std::vector<
        std::string > VMAP::VMAPFile::getSubGroups(const std::string
        &groupName)

        Get the list of subgroups of a given HDF group.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to get child groups

        List of all subgroups 
        """
        return _PyVMAP.VMAPFile_getSubGroups(self, groupName)

    def getSubGroupsPath(self, groupName):
        r"""
        std::vector<
        std::string > VMAP::VMAPFile::getSubGroupsPath(const std::string
        &groupName)

        Get the list of subgroups full path of a given HDF group.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to get child groups

        List of all subgroups as full path 
        """
        return _PyVMAP.VMAPFile_getSubGroupsPath(self, groupName)

    def createGeometryGroup(self, partId, partName):
        r"""
        std::string VMAP::VMAPFile::createGeometryGroup(int partId, const
        std::string &partName)

        Creates a sub folder in /VMAP/GEOMETRY/ and an attribute for the part
        name.

        Parameters:
        -----------

        partId:  Identifier for the part

        partName:  Name of the part

        Path to folder 
        """
        return _PyVMAP.VMAPFile_createGeometryGroup(self, partId, partName)

    def createVariablesGroup(self, stateId, partId):
        r"""
        std::string VMAP::VMAPFile::createVariablesGroup(int stateId, int
        partId)

        Creates a sub folder in /VMAP/VARIABLE/ and an attribute for the part
        name.

        Parameters:
        -----------

        stateId:  Identifier for the state

        partId:  Identifier for the part

        Path to folder 
        """
        return _PyVMAP.VMAPFile_createVariablesGroup(self, stateId, partId)

    def setVariableStateInformation(self, stateId, stateName, totalTime, stepTime, increment):
        r"""
        void VMAP::VMAPFile::setVariableStateInformation(int stateId, const
        std::string &stateName, double totalTime, double stepTime, int
        increment)

        Creates attributes for the state name, simulation total time, step
        time and step increment.

        Parameters:
        -----------

        stateId:  Identifier for the state /VMAP/VARIABLE/STATE-

        stateName:  string attribute MYSTATENAME

        totalTime:  double attribute MYTOTALTIME, total time of simulation

        stepTime:  double attribute MYSTEPTIME, relative time of the step

        increment:  int attribute MYINCREMENT 
        """
        return _PyVMAP.VMAPFile_setVariableStateInformation(self, stateId, stateName, totalTime, stepTime, increment)

    def getVariableStateInformation(self, stateId):
        r"""
        void VMAP::VMAPFile::getVariableStateInformation(int stateId,
        std::string &stateName, double &totalTime, double &stepTime, int
        &increment)

        Gets attributes for the state name, simulation total time, step time
        and step increment.

        Parameters:
        -----------

        stateId:  Identifier for the state /VMAP/VARIABLE/STATE-

        stateName:  string attribute MYSTATENAME

        totalTime:  double attribute MYTOTALTIME, total time of simulation

        stepTime:  double attribute MYSTEPTIME, relative time of the step

        increment:  int attribute MYSTATEINCREMENT 
        """
        return _PyVMAP.VMAPFile_getVariableStateInformation(self, stateId)

    def setIntegerAttribute(self, groupName, attributeName, value):
        r"""
        void
        VMAP::VMAPFile::setIntegerAttribute(const std::string &groupName,
        const std::string &attributeName, int value)

        Set an integer attribute and assign its value.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        attributeName:  Name of the attribute

        value:  Value of the attribute 
        """
        return _PyVMAP.VMAPFile_setIntegerAttribute(self, groupName, attributeName, value)

    def getIntegerAttribute(self, groupName, attributeName):
        r"""
        int
        VMAP::VMAPFile::getIntegerAttribute(const std::string &groupName,
        const std::string &attributeName)

        Get the content of an integer attribute.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        attributeName:  Name of the attribute

        Value of the integer attribute 
        """
        return _PyVMAP.VMAPFile_getIntegerAttribute(self, groupName, attributeName)

    def setDoubleAttribute(self, groupName, attributeName, value):
        r"""
        void
        VMAP::VMAPFile::setDoubleAttribute(const std::string &groupName, const
        std::string &attributeName, double value)

        Set a double attribute and assign its value.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        attributeName:  Name of the attribute

        value:  Value of the attribute 
        """
        return _PyVMAP.VMAPFile_setDoubleAttribute(self, groupName, attributeName, value)

    def getDoubleAttribute(self, groupName, attributeName):
        r"""
        double
        VMAP::VMAPFile::getDoubleAttribute(const std::string &groupName, const
        std::string &attributeName)

        Get the content of a double attribute.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        attributeName:  Name of the attribute

        Value of the double attribute 
        """
        return _PyVMAP.VMAPFile_getDoubleAttribute(self, groupName, attributeName)

    def createStringAttribute(self, groupName, attributeName, value):
        r"""
        void
        VMAP::VMAPFile::createStringAttribute(const std::string &groupName,
        const std::string &attributeName, const std::string &value)

        Creates a string attribute and assign its value.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        attributeName:  Name of the attribute

        value:  Value of the attribute 
        """
        return _PyVMAP.VMAPFile_createStringAttribute(self, groupName, attributeName, value)

    def getStringAttribute(self, groupName, attributeName):
        r"""
        std::string VMAP::VMAPFile::getStringAttribute(const std::string
        &groupName, const std::string &attributeName)

        Get the content of a string attribute.

        Parameters:
        -----------

        groupName:  Name of the HDF Group to read information from

        attributeName:  Name of the attribute

        Value of the string attribute 
        """
        return _PyVMAP.VMAPFile_getStringAttribute(self, groupName, attributeName)

    def setDeflateLevel(self, level):
        r"""
        void
        VMAP::VMAPFile::setDeflateLevel(int level)

        Enable zLib compression.

        Parameters:
        -----------

        level:  Level of ZLib compression in Range [1-9] 
        """
        return _PyVMAP.VMAPFile_setDeflateLevel(self, level)

    def printContent(self):
        r"""
        void
        VMAP::VMAPFile::printContent()

        debug printing 
        """
        return _PyVMAP.VMAPFile_printContent(self)

    def __enter__(self):
        return _PyVMAP.VMAPFile___enter__(self)

    def __exit__(self):
        return _PyVMAP.VMAPFile___exit__(self)

# Register VMAPFile in _PyVMAP:
_PyVMAP.VMAPFile_swigregister(VMAPFile)

def VMAPFile_getBaseGroups(pathToFile):
    return _PyVMAP.VMAPFile_getBaseGroups(pathToFile)

class VMAPElementTypeFactory(object):
    r"""


    Class to generate file VMAP element types.

    C++ includes: VMAPElementTypeFactory.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def createVMAPElementType(*args):
        return _PyVMAP.VMAPElementTypeFactory_createVMAPElementType(*args)
    __swig_destroy__ = _PyVMAP.delete_VMAPElementTypeFactory

# Register VMAPElementTypeFactory in _PyVMAP:
_PyVMAP.VMAPElementTypeFactory_swigregister(VMAPElementTypeFactory)

def VMAPElementTypeFactory_createVMAPElementType(*args):
    return _PyVMAP.VMAPElementTypeFactory_createVMAPElementType(*args)

class VMAPIntegrationTypeFactory(object):
    r"""


    Class to generate file VMAP integration types.

    C++ includes: VMAPIntegrationTypeFactory.h 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    INVALID_TYPE = _PyVMAP.VMAPIntegrationTypeFactory_INVALID_TYPE
    FIRST_GAUSS_1D = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_GAUSS_1D
    GAUSS_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_1
    GAUSS_2 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_2
    GAUSS_3 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_3
    GAUSS_4 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_4
    GAUSS_5 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_5
    GAUSS_6 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_6
    GAUSS_7 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_7
    GAUSS_8 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_8
    GAUSS_9 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_9
    GAUSS_10 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_10
    GAUSS_11 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_11
    GAUSS_12 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_12
    GAUSS_13 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_13
    GAUSS_14 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_14
    GAUSS_15 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_15
    GAUSS_16 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_16
    LAST_GAUSS_1D = _PyVMAP.VMAPIntegrationTypeFactory_LAST_GAUSS_1D
    FIRST_LOBATTO_1D = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_LOBATTO_1D
    LOBATTO_1 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_1
    LOBATTO_2 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_2
    LOBATTO_3 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_3
    LOBATTO_4 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_4
    LOBATTO_5 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_5
    LOBATTO_6 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_6
    LOBATTO_7 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_7
    LOBATTO_8 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_8
    LOBATTO_9 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_9
    LOBATTO_10 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_10
    LOBATTO_11 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_11
    LOBATTO_12 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_12
    LOBATTO_13 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_13
    LOBATTO_14 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_14
    LOBATTO_15 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_15
    LOBATTO_16 = _PyVMAP.VMAPIntegrationTypeFactory_LOBATTO_16
    LAST_LOBATTO_1D = _PyVMAP.VMAPIntegrationTypeFactory_LAST_LOBATTO_1D
    FIRST_SIMPSON_1D = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_SIMPSON_1D
    SIMPSON_1 = _PyVMAP.VMAPIntegrationTypeFactory_SIMPSON_1
    SIMPSON_3 = _PyVMAP.VMAPIntegrationTypeFactory_SIMPSON_3
    SIMPSON_5 = _PyVMAP.VMAPIntegrationTypeFactory_SIMPSON_5
    SIMPSON_7 = _PyVMAP.VMAPIntegrationTypeFactory_SIMPSON_7
    SIMPSON_9 = _PyVMAP.VMAPIntegrationTypeFactory_SIMPSON_9
    SIMPSON_11 = _PyVMAP.VMAPIntegrationTypeFactory_SIMPSON_11
    SIMPSON_13 = _PyVMAP.VMAPIntegrationTypeFactory_SIMPSON_13
    SIMPSON_15 = _PyVMAP.VMAPIntegrationTypeFactory_SIMPSON_15
    LAST_SIMPSON_1D = _PyVMAP.VMAPIntegrationTypeFactory_LAST_SIMPSON_1D
    FIRST_TRAPEZOIDAL_1D = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_TRAPEZOIDAL_1D
    TRAPEZOIDAL_1 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_1
    TRAPEZOIDAL_2 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_2
    TRAPEZOIDAL_3 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_3
    TRAPEZOIDAL_4 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_4
    TRAPEZOIDAL_5 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_5
    TRAPEZOIDAL_6 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_6
    TRAPEZOIDAL_7 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_7
    TRAPEZOIDAL_8 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_8
    TRAPEZOIDAL_9 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_9
    TRAPEZOIDAL_10 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_10
    TRAPEZOIDAL_11 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_11
    TRAPEZOIDAL_12 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_12
    TRAPEZOIDAL_13 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_13
    TRAPEZOIDAL_14 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_14
    TRAPEZOIDAL_15 = _PyVMAP.VMAPIntegrationTypeFactory_TRAPEZOIDAL_15
    LAST_TRAPEZOIDAL_1D = _PyVMAP.VMAPIntegrationTypeFactory_LAST_TRAPEZOIDAL_1D
    FIRST_COMPOSITE_1D = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_COMPOSITE_1D
    COMPOSITE_1 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_1
    COMPOSITE_2 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_2
    COMPOSITE_3 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_3
    COMPOSITE_4 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_4
    COMPOSITE_5 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_5
    COMPOSITE_6 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_6
    COMPOSITE_7 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_7
    COMPOSITE_8 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_8
    COMPOSITE_9 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_9
    COMPOSITE_10 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_10
    COMPOSITE_11 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_11
    COMPOSITE_12 = _PyVMAP.VMAPIntegrationTypeFactory_COMPOSITE_12
    LAST_COMPOSITE_1D = _PyVMAP.VMAPIntegrationTypeFactory_LAST_COMPOSITE_1D
    FIRST_GAUSS_TRIANGLE_2D = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_GAUSS_TRIANGLE_2D
    GAUSS_TRIANGLE_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_TRIANGLE_1
    GAUSS_TRIANGLE_3 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_TRIANGLE_3
    GAUSS_TRIANGLE_4 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_TRIANGLE_4
    GAUSS_TRIANGLE_6 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_TRIANGLE_6
    LAST_GAUSS_TRIANGLE_2D = _PyVMAP.VMAPIntegrationTypeFactory_LAST_GAUSS_TRIANGLE_2D
    FIRST_GAUSS_QUAD_2D = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_GAUSS_QUAD_2D
    GAUSS_QUAD_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_QUAD_1
    GAUSS_QUAD_4 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_QUAD_4
    GAUSS_QUAD_9 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_QUAD_9
    LAST_GAUSS_QUAD_2D = _PyVMAP.VMAPIntegrationTypeFactory_LAST_GAUSS_QUAD_2D
    FIRST_SHELL_NODAL_2D = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_SHELL_NODAL_2D
    NODES_TRIANGLE_3 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_TRIANGLE_3
    NODES_TRIANGLE_6 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_TRIANGLE_6
    NODES_QUAD_4 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_QUAD_4
    NODES_QUAD_8 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_QUAD_8
    NODES_QUAD_9 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_QUAD_9
    LAST_SHELL_NODAL_2D = _PyVMAP.VMAPIntegrationTypeFactory_LAST_SHELL_NODAL_2D
    FIRST_LAYERED_SOLID = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_LAYERED_SOLID
    GAUSS_1_LAYERED_HEXAHEDRON_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_1_LAYERED_HEXAHEDRON_1
    GAUSS_1_LAYERED_HEXAHEDRON_2 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_1_LAYERED_HEXAHEDRON_2
    GAUSS_1_LAYERED_HEXAHEDRON_3 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_1_LAYERED_HEXAHEDRON_3
    GAUSS_4_LAYERED_HEXAHEDRON_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_4_LAYERED_HEXAHEDRON_1
    GAUSS_4_LAYERED_HEXAHEDRON_2 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_4_LAYERED_HEXAHEDRON_2
    GAUSS_4_LAYERED_HEXAHEDRON_3 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_4_LAYERED_HEXAHEDRON_3
    GAUSS_9_LAYERED_HEXAHEDRON_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_9_LAYERED_HEXAHEDRON_1
    GAUSS_9_LAYERED_HEXAHEDRON_2 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_9_LAYERED_HEXAHEDRON_2
    GAUSS_9_LAYERED_HEXAHEDRON_3 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_9_LAYERED_HEXAHEDRON_3
    GAUSS_1_LAYERED_WEDGE_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_1_LAYERED_WEDGE_1
    GAUSS_1_LAYERED_WEDGE_2 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_1_LAYERED_WEDGE_2
    GAUSS_1_LAYERED_WEDGE_3 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_1_LAYERED_WEDGE_3
    GAUSS_4_LAYERED_WEDGE_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_4_LAYERED_WEDGE_1
    GAUSS_4_LAYERED_WEDGE_2 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_4_LAYERED_WEDGE_2
    GAUSS_4_LAYERED_WEDGE_3 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_4_LAYERED_WEDGE_3
    LAST_LAYERED_SOLID = _PyVMAP.VMAPIntegrationTypeFactory_LAST_LAYERED_SOLID
    FIRST_VOLUME_ELEMENT = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_VOLUME_ELEMENT
    GAUSS_TETRAHEDRON_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_TETRAHEDRON_1
    GAUSS_TETRAHEDRON_4 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_TETRAHEDRON_4
    GAUSS_TETRAHEDRON_8 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_TETRAHEDRON_8
    GAUSS_TETRAHEDRON_11 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_TETRAHEDRON_11
    GAUSS_TETRAHEDRON_15 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_TETRAHEDRON_15
    GAUSS_PYRAMID_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_PYRAMID_1
    GAUSS_PYRAMID_5 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_PYRAMID_5
    GAUSS_PYRAMID_8 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_PYRAMID_8
    GAUSS_WEDGE_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_WEDGE_1
    GAUSS_WEDGE_2 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_WEDGE_2
    GAUSS_WEDGE_6 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_WEDGE_6
    GAUSS_WEDGE_8 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_WEDGE_8
    GAUSS_WEDGE_9 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_WEDGE_9
    GAUSS_WEDGE_18 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_WEDGE_18
    GAUSS_HEXAHEDRON_1 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_HEXAHEDRON_1
    GAUSS_HEXAHEDRON_8 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_HEXAHEDRON_8
    GAUSS_HEXAHEDRON_27 = _PyVMAP.VMAPIntegrationTypeFactory_GAUSS_HEXAHEDRON_27
    LAST_VOLUME_ELEMENT = _PyVMAP.VMAPIntegrationTypeFactory_LAST_VOLUME_ELEMENT
    FIRST_VOLUME_NODAL = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_VOLUME_NODAL
    NODES_TETRAHEDRON_4 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_TETRAHEDRON_4
    NODES_TETRAHEDRON_10 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_TETRAHEDRON_10
    NODES_WEDGE_6 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_WEDGE_6
    NODES_WEDGE_15 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_WEDGE_15
    NODES_PYRAMID_5 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_PYRAMID_5
    NODES_PYRAMID_13 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_PYRAMID_13
    NODES_HEXAHEDRON_8 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_HEXAHEDRON_8
    NODES_HEXAHEDRON_20 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_HEXAHEDRON_20
    NODES_HEXAHEDRON_27 = _PyVMAP.VMAPIntegrationTypeFactory_NODES_HEXAHEDRON_27
    LAST_VOLUME_NODAL = _PyVMAP.VMAPIntegrationTypeFactory_LAST_VOLUME_NODAL
    FIRST_USER_DEFINED_TYPE = _PyVMAP.VMAPIntegrationTypeFactory_FIRST_USER_DEFINED_TYPE

    @staticmethod
    def createVMAPIntegrationType(eIntegrationType, offset=0.):
        return _PyVMAP.VMAPIntegrationTypeFactory_createVMAPIntegrationType(eIntegrationType, offset)

    @staticmethod
    def createVMAPCompositeIntegrationType(nLayers, layerIntegrationRules, layerThickness):
        return _PyVMAP.VMAPIntegrationTypeFactory_createVMAPCompositeIntegrationType(nLayers, layerIntegrationRules, layerThickness)

    @staticmethod
    def createCombinedVMAPIntegrationType(firstType, secondType):
        return _PyVMAP.VMAPIntegrationTypeFactory_createCombinedVMAPIntegrationType(firstType, secondType)
    __swig_destroy__ = _PyVMAP.delete_VMAPIntegrationTypeFactory

# Register VMAPIntegrationTypeFactory in _PyVMAP:
_PyVMAP.VMAPIntegrationTypeFactory_swigregister(VMAPIntegrationTypeFactory)

def VMAPIntegrationTypeFactory_createVMAPIntegrationType(eIntegrationType, offset=0.):
    return _PyVMAP.VMAPIntegrationTypeFactory_createVMAPIntegrationType(eIntegrationType, offset)

def VMAPIntegrationTypeFactory_createVMAPCompositeIntegrationType(nLayers, layerIntegrationRules, layerThickness):
    return _PyVMAP.VMAPIntegrationTypeFactory_createVMAPCompositeIntegrationType(nLayers, layerIntegrationRules, layerThickness)

def VMAPIntegrationTypeFactory_createCombinedVMAPIntegrationType(firstType, secondType):
    return _PyVMAP.VMAPIntegrationTypeFactory_createCombinedVMAPIntegrationType(firstType, secondType)



